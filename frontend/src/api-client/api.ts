/* tslint:disable */
/* eslint-disable */
/**
 * API Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CancelExecutionJob200Response
 */
export interface CancelExecutionJob200Response {
    /**
     * 
     * @type {string}
     * @memberof CancelExecutionJob200Response
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface EnvironmentVariable
 */
export interface EnvironmentVariable {
    /**
     * 
     * @type {string}
     * @memberof EnvironmentVariable
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof EnvironmentVariable
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface Execute200Response
 */
export interface Execute200Response {
    /**
     * 
     * @type {number}
     * @memberof Execute200Response
     */
    'jobId': number;
    /**
     * 
     * @type {string}
     * @memberof Execute200Response
     */
    'events': string;
}
/**
 * 
 * @export
 * @interface ExecutionConfig
 */
export interface ExecutionConfig {
    /**
     * Represents the worker provider.
     * @type {string}
     * @memberof ExecutionConfig
     */
    'ODIN_WORKER_PROVIDER': string;
    /**
     * Represents the concurrency level for the worker.
     * @type {number}
     * @memberof ExecutionConfig
     */
    'ODIN_WORKER_CONCURRENCY': number;
    /**
     * Represents the buffer size for the worker.
     * @type {number}
     * @memberof ExecutionConfig
     */
    'ODIN_WORKER_BUFFER_SIZE': number;
    /**
     * Represents the task timeout.
     * @type {number}
     * @memberof ExecutionConfig
     */
    'ODIN_WORKER_TASK_TIMEOUT': number;
    /**
     * Represents the polling frequency for the worker in seconds.
     * @type {number}
     * @memberof ExecutionConfig
     */
    'ODIN_WORKER_POLL_FREQ': number;
    /**
     * Represents the runtime for the worker in seconds.
     * @type {string}
     * @memberof ExecutionConfig
     */
    'ODIN_WORKER_RUNTIME': string;
    /**
     * Represents the log level.
     * @type {string}
     * @memberof ExecutionConfig
     */
    'ODIN_LOG_LEVEL': string;
    /**
     * Represents the base directory for the system provider.
     * @type {string}
     * @memberof ExecutionConfig
     */
    'ODIN_SYSTEM_PROVIDER_BASE_DIR'?: string;
    /**
     * Represents whether to clean up directories created by the system provider.
     * @type {boolean}
     * @memberof ExecutionConfig
     */
    'ODIN_SYSTEM_PROVIDER_CLEAN_UP'?: boolean;
}
/**
 * 
 * @export
 * @interface ExecutionEnvironmentSpec
 */
export interface ExecutionEnvironmentSpec {
    /**
     * 
     * @type {Array<EnvironmentVariable>}
     * @memberof ExecutionEnvironmentSpec
     */
    'environment_variables'?: Array<EnvironmentVariable>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ExecutionEnvironmentSpec
     */
    'languageDependencies'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ExecutionEnvironmentSpec
     */
    'systemDependencies'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ExecutionEnvironmentSpec
     */
    'args'?: string;
}
/**
 * 
 * @export
 * @interface ExecutionRequest
 */
export interface ExecutionRequest {
    /**
     * 
     * @type {ExecutionEnvironmentSpec}
     * @memberof ExecutionRequest
     */
    'environment'?: ExecutionEnvironmentSpec;
    /**
     * 
     * @type {string}
     * @memberof ExecutionRequest
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ExecutionRequest
     */
    'language': string;
    /**
     * 
     * @type {number}
     * @memberof ExecutionRequest
     */
    'max_retries'?: number;
    /**
     * 
     * @type {number}
     * @memberof ExecutionRequest
     */
    'timeout'?: number;
}
/**
 * 
 * @export
 * @interface ExecutionResult
 */
export interface ExecutionResult {
    /**
     * 
     * @type {number}
     * @memberof ExecutionResult
     */
    'jobId': number;
    /**
     * 
     * @type {string}
     * @memberof ExecutionResult
     */
    'script': string;
    /**
     * 
     * @type {string}
     * @memberof ExecutionResult
     */
    'flake': string;
    /**
     * 
     * @type {string}
     * @memberof ExecutionResult
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof ExecutionResult
     */
    'started_at': string;
    /**
     * 
     * @type {string}
     * @memberof ExecutionResult
     */
    'updated_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof ExecutionResult
     */
    'execId': number;
    /**
     * 
     * @type {string}
     * @memberof ExecutionResult
     */
    'args': string;
    /**
     * 
     * @type {string}
     * @memberof ExecutionResult
     */
    'finished_at': string;
    /**
     * 
     * @type {string}
     * @memberof ExecutionResult
     */
    'exec_logs': string;
    /**
     * 
     * @type {string}
     * @memberof ExecutionResult
     */
    'nix_logs'?: string;
}
/**
 * 
 * @export
 * @interface ExecutionWorker
 */
export interface ExecutionWorker {
    /**
     * 
     * @type {number}
     * @memberof ExecutionWorker
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ExecutionWorker
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ExecutionWorker
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof ExecutionWorker
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof ExecutionWorker
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface GetAllExecutionJobs200Response
 */
export interface GetAllExecutionJobs200Response {
    /**
     * 
     * @type {Array<Job>}
     * @memberof GetAllExecutionJobs200Response
     */
    'jobs': Array<Job>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof GetAllExecutionJobs200Response
     */
    'pagination': PaginationResponse;
}
/**
 * 
 * @export
 * @interface GetAllExecutions200Response
 */
export interface GetAllExecutions200Response {
    /**
     * 
     * @type {Array<ExecutionResult>}
     * @memberof GetAllExecutions200Response
     */
    'executions': Array<ExecutionResult>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof GetAllExecutions200Response
     */
    'pagination': PaginationResponse;
}
/**
 * 
 * @export
 * @interface GetAllLanguages200Response
 */
export interface GetAllLanguages200Response {
    /**
     * 
     * @type {Array<Language>}
     * @memberof GetAllLanguages200Response
     */
    'languages': Array<Language>;
}
/**
 * 
 * @export
 * @interface GetExecutionWorkers200Response
 */
export interface GetExecutionWorkers200Response {
    /**
     * 
     * @type {Array<ExecutionWorker>}
     * @memberof GetExecutionWorkers200Response
     */
    'workers': Array<ExecutionWorker>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof GetExecutionWorkers200Response
     */
    'pagination': PaginationResponse;
}
/**
 * 
 * @export
 * @interface GetVersion200Response
 */
export interface GetVersion200Response {
    /**
     * 
     * @type {string}
     * @memberof GetVersion200Response
     */
    'version': string;
}
/**
 * 
 * @export
 * @interface Job
 */
export interface Job {
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    'jobId': number;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'script': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'flake': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'started_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface Language
 */
export interface Language {
    /**
     * Name of the programming language
     * @type {string}
     * @memberof Language
     */
    'name': string;
    /**
     * File extension for the programming language
     * @type {string}
     * @memberof Language
     */
    'extension': string;
    /**
     * Default code snippet for the programming language
     * @type {string}
     * @memberof Language
     */
    'defaultcode': string;
    /**
     * Monaco editor language setting for the programming language
     * @type {string}
     * @memberof Language
     */
    'monacolanguage': string;
    /**
     * The search query to be passed to SearchLanguagePackages API for this language
     * @type {string}
     * @memberof Language
     */
    'searchquery': string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface Package
 */
export interface Package {
    /**
     * Name of the package
     * @type {string}
     * @memberof Package
     */
    'name': string;
    /**
     * Version of the package
     * @type {string}
     * @memberof Package
     */
    'version': string;
}
/**
 * 
 * @export
 * @interface PackageExistRequest
 */
export interface PackageExistRequest {
    /**
     * The language to check the packages against
     * @type {string}
     * @memberof PackageExistRequest
     */
    'language': string;
    /**
     * List of packages to verify.
     * @type {Array<string>}
     * @memberof PackageExistRequest
     */
    'packages': Array<string>;
}
/**
 * 
 * @export
 * @interface PackagesExist200Response
 */
export interface PackagesExist200Response {
    /**
     * Indicate all packages\' existance for given language
     * @type {boolean}
     * @memberof PackagesExist200Response
     */
    'exists': boolean;
    /**
     * List of packages that do not exist for the language
     * @type {Array<string>}
     * @memberof PackagesExist200Response
     */
    'nonExistingPackages'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PaginationResponse
 */
export interface PaginationResponse {
    /**
     * Represents the total number of items.
     * @type {number}
     * @memberof PaginationResponse
     */
    'total': number;
    /**
     * Represents the total number of pages.
     * @type {number}
     * @memberof PaginationResponse
     */
    'pages'?: number;
    /**
     * Represents the current page.
     * @type {number}
     * @memberof PaginationResponse
     */
    'page'?: number;
    /**
     * Represents the number of items per page.
     * @type {number}
     * @memberof PaginationResponse
     */
    'limit': number;
    /**
     * 
     * @type {string}
     * @memberof PaginationResponse
     */
    'next'?: string;
}
/**
 * 
 * @export
 * @interface SearchSystemPackages200Response
 */
export interface SearchSystemPackages200Response {
    /**
     * 
     * @type {Array<Package>}
     * @memberof SearchSystemPackages200Response
     */
    'packages': Array<Package>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancel Execution Job
         * @summary Cancel Execution Job
         * @param {number} jobId 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelExecutionJob: async (jobId: number, xAuthToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('cancelExecutionJob', 'jobId', jobId)
            const localVarPath = `/executions/jobs/{JobId}`
                .replace(`{${"JobId"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthToken != null) {
                localVarHeaderParameter['X-Auth-Token'] = String(xAuthToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete execution job
         * @summary Delete execution job
         * @param {number} jobId 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExecutionJob: async (jobId: number, xAuthToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('deleteExecutionJob', 'jobId', jobId)
            const localVarPath = `/executions/jobs/{JobId}`
                .replace(`{${"JobId"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthToken != null) {
                localVarHeaderParameter['X-Auth-Token'] = String(xAuthToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete execution worker
         * @summary Delete execution worker
         * @param {number} workerId 
         * @param {boolean} [force] 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExecutionWorker: async (workerId: number, force?: boolean, xAuthToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('deleteExecutionWorker', 'workerId', workerId)
            const localVarPath = `/executions/workers/{workerId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            if (xAuthToken != null) {
                localVarHeaderParameter['X-Auth-Token'] = String(xAuthToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Execute a script
         * @summary Execute a script
         * @param {ExecutionRequest} executionRequest 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execute: async (executionRequest: ExecutionRequest, xAuthToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'executionRequest' is not null or undefined
            assertParamExists('execute', 'executionRequest', executionRequest)
            const localVarPath = `/executions/execute`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthToken != null) {
                localVarHeaderParameter['X-Auth-Token'] = String(xAuthToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(executionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all execution jobs
         * @summary Get all execution jobs
         * @param {number} [page] The page number to retrieve.
         * @param {number} [pageSize] The number of items per page.
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExecutionJobs: async (page?: number, pageSize?: number, xAuthToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/jobs/execution`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (xAuthToken != null) {
                localVarHeaderParameter['X-Auth-Token'] = String(xAuthToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all executions
         * @summary Get all executions
         * @param {number} [page] The page number to retrieve.
         * @param {number} [pageSize] The number of items per page.
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExecutions: async (page?: number, pageSize?: number, xAuthToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/executions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (xAuthToken != null) {
                localVarHeaderParameter['X-Auth-Token'] = String(xAuthToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all languages
         * @summary Get all languages
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLanguages: async (xAuthToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/languages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthToken != null) {
                localVarHeaderParameter['X-Auth-Token'] = String(xAuthToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get execution config
         * @summary Get execution config
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutionConfig: async (xAuthToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/execution/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthToken != null) {
                localVarHeaderParameter['X-Auth-Token'] = String(xAuthToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get execution job
         * @summary Get execution job
         * @param {number} jobId 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutionJobById: async (jobId: number, xAuthToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('getExecutionJobById', 'jobId', jobId)
            const localVarPath = `/executions/jobs/{JobId}`
                .replace(`{${"JobId"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthToken != null) {
                localVarHeaderParameter['X-Auth-Token'] = String(xAuthToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get execution result by id
         * @summary Get execution result by id
         * @param {number} execId 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutionResultById: async (execId: number, xAuthToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'execId' is not null or undefined
            assertParamExists('getExecutionResultById', 'execId', execId)
            const localVarPath = `/executions/{execId}`
                .replace(`{${"execId"}}`, encodeURIComponent(String(execId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthToken != null) {
                localVarHeaderParameter['X-Auth-Token'] = String(xAuthToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all execution workers
         * @summary Get all execution workers
         * @param {number} [page] The page number to retrieve.
         * @param {number} [pageSize] The number of items per page.
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutionWorkers: async (page?: number, pageSize?: number, xAuthToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/executions/workers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (xAuthToken != null) {
                localVarHeaderParameter['X-Auth-Token'] = String(xAuthToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get executions of given job
         * @summary Get executions of given job
         * @param {number} jobId 
         * @param {number} [page] The page number to retrieve.
         * @param {number} [pageSize] The number of items per page.
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutionsForJob: async (jobId: number, page?: number, pageSize?: number, xAuthToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('getExecutionsForJob', 'jobId', jobId)
            const localVarPath = `/jobs/{JobId}/executions`
                .replace(`{${"JobId"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (xAuthToken != null) {
                localVarHeaderParameter['X-Auth-Token'] = String(xAuthToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get version
         * @summary Get version
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion: async (xAuthToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthToken != null) {
                localVarHeaderParameter['X-Auth-Token'] = String(xAuthToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify the package list is available for the language version while switching between language versions.
         * @summary Verify package list is available.
         * @param {PackageExistRequest} packageExistRequest 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packagesExist: async (packageExistRequest: PackageExistRequest, xAuthToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageExistRequest' is not null or undefined
            assertParamExists('packagesExist', 'packageExistRequest', packageExistRequest)
            const localVarPath = `/packages/exist/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthToken != null) {
                localVarHeaderParameter['X-Auth-Token'] = String(xAuthToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(packageExistRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for language specific packages
         * @summary Search for language specific packages
         * @param {string} language The language for which the package is searched.
         * @param {string} searchString The string to be searched.
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLanguagePackages: async (language: string, searchString: string, xAuthToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            assertParamExists('searchLanguagePackages', 'language', language)
            // verify required parameter 'searchString' is not null or undefined
            assertParamExists('searchLanguagePackages', 'searchString', searchString)
            const localVarPath = `/search/language`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (searchString !== undefined) {
                localVarQueryParameter['searchString'] = searchString;
            }

            if (xAuthToken != null) {
                localVarHeaderParameter['X-Auth-Token'] = String(xAuthToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for system packages
         * @summary Search for system packages
         * @param {string} searchString The string to be searched.
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSystemPackages: async (searchString: string, xAuthToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchString' is not null or undefined
            assertParamExists('searchSystemPackages', 'searchString', searchString)
            const localVarPath = `/search/system`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchString !== undefined) {
                localVarQueryParameter['searchString'] = searchString;
            }

            if (xAuthToken != null) {
                localVarHeaderParameter['X-Auth-Token'] = String(xAuthToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancel Execution Job
         * @summary Cancel Execution Job
         * @param {number} jobId 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelExecutionJob(jobId: number, xAuthToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelExecutionJob200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelExecutionJob(jobId, xAuthToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.cancelExecutionJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete execution job
         * @summary Delete execution job
         * @param {number} jobId 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExecutionJob(jobId: number, xAuthToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExecutionJob(jobId, xAuthToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteExecutionJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete execution worker
         * @summary Delete execution worker
         * @param {number} workerId 
         * @param {boolean} [force] 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExecutionWorker(workerId: number, force?: boolean, xAuthToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelExecutionJob200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExecutionWorker(workerId, force, xAuthToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteExecutionWorker']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Execute a script
         * @summary Execute a script
         * @param {ExecutionRequest} executionRequest 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async execute(executionRequest: ExecutionRequest, xAuthToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Execute200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.execute(executionRequest, xAuthToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.execute']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all execution jobs
         * @summary Get all execution jobs
         * @param {number} [page] The page number to retrieve.
         * @param {number} [pageSize] The number of items per page.
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllExecutionJobs(page?: number, pageSize?: number, xAuthToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllExecutionJobs200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllExecutionJobs(page, pageSize, xAuthToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllExecutionJobs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all executions
         * @summary Get all executions
         * @param {number} [page] The page number to retrieve.
         * @param {number} [pageSize] The number of items per page.
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllExecutions(page?: number, pageSize?: number, xAuthToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllExecutions200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllExecutions(page, pageSize, xAuthToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllExecutions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all languages
         * @summary Get all languages
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllLanguages(xAuthToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllLanguages200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllLanguages(xAuthToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllLanguages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get execution config
         * @summary Get execution config
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExecutionConfig(xAuthToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecutionConfig>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExecutionConfig(xAuthToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getExecutionConfig']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get execution job
         * @summary Get execution job
         * @param {number} jobId 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExecutionJobById(jobId: number, xAuthToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExecutionJobById(jobId, xAuthToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getExecutionJobById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get execution result by id
         * @summary Get execution result by id
         * @param {number} execId 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExecutionResultById(execId: number, xAuthToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecutionResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExecutionResultById(execId, xAuthToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getExecutionResultById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all execution workers
         * @summary Get all execution workers
         * @param {number} [page] The page number to retrieve.
         * @param {number} [pageSize] The number of items per page.
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExecutionWorkers(page?: number, pageSize?: number, xAuthToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetExecutionWorkers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExecutionWorkers(page, pageSize, xAuthToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getExecutionWorkers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get executions of given job
         * @summary Get executions of given job
         * @param {number} jobId 
         * @param {number} [page] The page number to retrieve.
         * @param {number} [pageSize] The number of items per page.
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExecutionsForJob(jobId: number, page?: number, pageSize?: number, xAuthToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllExecutions200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExecutionsForJob(jobId, page, pageSize, xAuthToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getExecutionsForJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get version
         * @summary Get version
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVersion(xAuthToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetVersion200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVersion(xAuthToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Verify the package list is available for the language version while switching between language versions.
         * @summary Verify package list is available.
         * @param {PackageExistRequest} packageExistRequest 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async packagesExist(packageExistRequest: PackageExistRequest, xAuthToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PackagesExist200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.packagesExist(packageExistRequest, xAuthToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.packagesExist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Search for language specific packages
         * @summary Search for language specific packages
         * @param {string} language The language for which the package is searched.
         * @param {string} searchString The string to be searched.
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchLanguagePackages(language: string, searchString: string, xAuthToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchSystemPackages200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchLanguagePackages(language, searchString, xAuthToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.searchLanguagePackages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Search for system packages
         * @summary Search for system packages
         * @param {string} searchString The string to be searched.
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchSystemPackages(searchString: string, xAuthToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchSystemPackages200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchSystemPackages(searchString, xAuthToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.searchSystemPackages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Cancel Execution Job
         * @summary Cancel Execution Job
         * @param {number} jobId 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelExecutionJob(jobId: number, xAuthToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<CancelExecutionJob200Response> {
            return localVarFp.cancelExecutionJob(jobId, xAuthToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete execution job
         * @summary Delete execution job
         * @param {number} jobId 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExecutionJob(jobId: number, xAuthToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteExecutionJob(jobId, xAuthToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete execution worker
         * @summary Delete execution worker
         * @param {number} workerId 
         * @param {boolean} [force] 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExecutionWorker(workerId: number, force?: boolean, xAuthToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<CancelExecutionJob200Response> {
            return localVarFp.deleteExecutionWorker(workerId, force, xAuthToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Execute a script
         * @summary Execute a script
         * @param {ExecutionRequest} executionRequest 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execute(executionRequest: ExecutionRequest, xAuthToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<Execute200Response> {
            return localVarFp.execute(executionRequest, xAuthToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all execution jobs
         * @summary Get all execution jobs
         * @param {number} [page] The page number to retrieve.
         * @param {number} [pageSize] The number of items per page.
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExecutionJobs(page?: number, pageSize?: number, xAuthToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetAllExecutionJobs200Response> {
            return localVarFp.getAllExecutionJobs(page, pageSize, xAuthToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all executions
         * @summary Get all executions
         * @param {number} [page] The page number to retrieve.
         * @param {number} [pageSize] The number of items per page.
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExecutions(page?: number, pageSize?: number, xAuthToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetAllExecutions200Response> {
            return localVarFp.getAllExecutions(page, pageSize, xAuthToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all languages
         * @summary Get all languages
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLanguages(xAuthToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetAllLanguages200Response> {
            return localVarFp.getAllLanguages(xAuthToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Get execution config
         * @summary Get execution config
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutionConfig(xAuthToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<ExecutionConfig> {
            return localVarFp.getExecutionConfig(xAuthToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Get execution job
         * @summary Get execution job
         * @param {number} jobId 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutionJobById(jobId: number, xAuthToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<Job> {
            return localVarFp.getExecutionJobById(jobId, xAuthToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Get execution result by id
         * @summary Get execution result by id
         * @param {number} execId 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutionResultById(execId: number, xAuthToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<ExecutionResult> {
            return localVarFp.getExecutionResultById(execId, xAuthToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all execution workers
         * @summary Get all execution workers
         * @param {number} [page] The page number to retrieve.
         * @param {number} [pageSize] The number of items per page.
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutionWorkers(page?: number, pageSize?: number, xAuthToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetExecutionWorkers200Response> {
            return localVarFp.getExecutionWorkers(page, pageSize, xAuthToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Get executions of given job
         * @summary Get executions of given job
         * @param {number} jobId 
         * @param {number} [page] The page number to retrieve.
         * @param {number} [pageSize] The number of items per page.
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutionsForJob(jobId: number, page?: number, pageSize?: number, xAuthToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetAllExecutions200Response> {
            return localVarFp.getExecutionsForJob(jobId, page, pageSize, xAuthToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Get version
         * @summary Get version
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(xAuthToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetVersion200Response> {
            return localVarFp.getVersion(xAuthToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify the package list is available for the language version while switching between language versions.
         * @summary Verify package list is available.
         * @param {PackageExistRequest} packageExistRequest 
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packagesExist(packageExistRequest: PackageExistRequest, xAuthToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<PackagesExist200Response> {
            return localVarFp.packagesExist(packageExistRequest, xAuthToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for language specific packages
         * @summary Search for language specific packages
         * @param {string} language The language for which the package is searched.
         * @param {string} searchString The string to be searched.
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLanguagePackages(language: string, searchString: string, xAuthToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<SearchSystemPackages200Response> {
            return localVarFp.searchLanguagePackages(language, searchString, xAuthToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for system packages
         * @summary Search for system packages
         * @param {string} searchString The string to be searched.
         * @param {string} [xAuthToken] Authentication token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSystemPackages(searchString: string, xAuthToken?: string, options?: RawAxiosRequestConfig): AxiosPromise<SearchSystemPackages200Response> {
            return localVarFp.searchSystemPackages(searchString, xAuthToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Cancel Execution Job
     * @summary Cancel Execution Job
     * @param {number} jobId 
     * @param {string} [xAuthToken] Authentication token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public cancelExecutionJob(jobId: number, xAuthToken?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).cancelExecutionJob(jobId, xAuthToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete execution job
     * @summary Delete execution job
     * @param {number} jobId 
     * @param {string} [xAuthToken] Authentication token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteExecutionJob(jobId: number, xAuthToken?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteExecutionJob(jobId, xAuthToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete execution worker
     * @summary Delete execution worker
     * @param {number} workerId 
     * @param {boolean} [force] 
     * @param {string} [xAuthToken] Authentication token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteExecutionWorker(workerId: number, force?: boolean, xAuthToken?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteExecutionWorker(workerId, force, xAuthToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Execute a script
     * @summary Execute a script
     * @param {ExecutionRequest} executionRequest 
     * @param {string} [xAuthToken] Authentication token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public execute(executionRequest: ExecutionRequest, xAuthToken?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).execute(executionRequest, xAuthToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all execution jobs
     * @summary Get all execution jobs
     * @param {number} [page] The page number to retrieve.
     * @param {number} [pageSize] The number of items per page.
     * @param {string} [xAuthToken] Authentication token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllExecutionJobs(page?: number, pageSize?: number, xAuthToken?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllExecutionJobs(page, pageSize, xAuthToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all executions
     * @summary Get all executions
     * @param {number} [page] The page number to retrieve.
     * @param {number} [pageSize] The number of items per page.
     * @param {string} [xAuthToken] Authentication token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllExecutions(page?: number, pageSize?: number, xAuthToken?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllExecutions(page, pageSize, xAuthToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all languages
     * @summary Get all languages
     * @param {string} [xAuthToken] Authentication token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllLanguages(xAuthToken?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllLanguages(xAuthToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get execution config
     * @summary Get execution config
     * @param {string} [xAuthToken] Authentication token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getExecutionConfig(xAuthToken?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getExecutionConfig(xAuthToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get execution job
     * @summary Get execution job
     * @param {number} jobId 
     * @param {string} [xAuthToken] Authentication token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getExecutionJobById(jobId: number, xAuthToken?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getExecutionJobById(jobId, xAuthToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get execution result by id
     * @summary Get execution result by id
     * @param {number} execId 
     * @param {string} [xAuthToken] Authentication token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getExecutionResultById(execId: number, xAuthToken?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getExecutionResultById(execId, xAuthToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all execution workers
     * @summary Get all execution workers
     * @param {number} [page] The page number to retrieve.
     * @param {number} [pageSize] The number of items per page.
     * @param {string} [xAuthToken] Authentication token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getExecutionWorkers(page?: number, pageSize?: number, xAuthToken?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getExecutionWorkers(page, pageSize, xAuthToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get executions of given job
     * @summary Get executions of given job
     * @param {number} jobId 
     * @param {number} [page] The page number to retrieve.
     * @param {number} [pageSize] The number of items per page.
     * @param {string} [xAuthToken] Authentication token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getExecutionsForJob(jobId: number, page?: number, pageSize?: number, xAuthToken?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getExecutionsForJob(jobId, page, pageSize, xAuthToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get version
     * @summary Get version
     * @param {string} [xAuthToken] Authentication token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVersion(xAuthToken?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVersion(xAuthToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify the package list is available for the language version while switching between language versions.
     * @summary Verify package list is available.
     * @param {PackageExistRequest} packageExistRequest 
     * @param {string} [xAuthToken] Authentication token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public packagesExist(packageExistRequest: PackageExistRequest, xAuthToken?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).packagesExist(packageExistRequest, xAuthToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for language specific packages
     * @summary Search for language specific packages
     * @param {string} language The language for which the package is searched.
     * @param {string} searchString The string to be searched.
     * @param {string} [xAuthToken] Authentication token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchLanguagePackages(language: string, searchString: string, xAuthToken?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).searchLanguagePackages(language, searchString, xAuthToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for system packages
     * @summary Search for system packages
     * @param {string} searchString The string to be searched.
     * @param {string} [xAuthToken] Authentication token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchSystemPackages(searchString: string, xAuthToken?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).searchSystemPackages(searchString, xAuthToken, options).then((request) => request(this.axios, this.basePath));
    }
}



