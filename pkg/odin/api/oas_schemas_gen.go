// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"
)

type CancelExecutionJobBadRequest Error

func (*CancelExecutionJobBadRequest) cancelExecutionJobRes() {}

type CancelExecutionJobForbidden Error

func (*CancelExecutionJobForbidden) cancelExecutionJobRes() {}

type CancelExecutionJobInternalServerError Error

func (*CancelExecutionJobInternalServerError) cancelExecutionJobRes() {}

type CancelExecutionJobOK struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *CancelExecutionJobOK) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *CancelExecutionJobOK) SetMessage(val string) {
	s.Message = val
}

func (*CancelExecutionJobOK) cancelExecutionJobRes() {}

// Configuration for a sandbox environment request.
// Ref: #/components/schemas/CreateSandbox
type CreateSandbox struct {
	// Nix flake configuration for the sandbox environment.
	NixFlake OptString `json:"nix_flake"`
	// List of programming languages required in the sandbox.
	Languages []string `json:"languages"`
	// List of system-level dependencies needed in the sandbox.
	SystemDependencies []string `json:"system_dependencies"`
	// Shell script to be executed during sandbox initialization.
	ShellHook OptString `json:"shell_hook"`
}

// GetNixFlake returns the value of NixFlake.
func (s *CreateSandbox) GetNixFlake() OptString {
	return s.NixFlake
}

// GetLanguages returns the value of Languages.
func (s *CreateSandbox) GetLanguages() []string {
	return s.Languages
}

// GetSystemDependencies returns the value of SystemDependencies.
func (s *CreateSandbox) GetSystemDependencies() []string {
	return s.SystemDependencies
}

// GetShellHook returns the value of ShellHook.
func (s *CreateSandbox) GetShellHook() OptString {
	return s.ShellHook
}

// SetNixFlake sets the value of NixFlake.
func (s *CreateSandbox) SetNixFlake(val OptString) {
	s.NixFlake = val
}

// SetLanguages sets the value of Languages.
func (s *CreateSandbox) SetLanguages(val []string) {
	s.Languages = val
}

// SetSystemDependencies sets the value of SystemDependencies.
func (s *CreateSandbox) SetSystemDependencies(val []string) {
	s.SystemDependencies = val
}

// SetShellHook sets the value of ShellHook.
func (s *CreateSandbox) SetShellHook(val OptString) {
	s.ShellHook = val
}

type CreateSandboxBadRequest Error

func (*CreateSandboxBadRequest) createSandboxRes() {}

type CreateSandboxForbidden Error

func (*CreateSandboxForbidden) createSandboxRes() {}

type CreateSandboxInternalServerError Error

func (*CreateSandboxInternalServerError) createSandboxRes() {}

type CreateSandboxOK struct {
	Result           string    `json:"result"`
	SandboxId        int64     `json:"sandboxId"`
	SandboxStatusSSE OptString `json:"sandboxStatusSSE"`
	SandboxStatusWS  OptString `json:"sandboxStatusWS"`
}

// GetResult returns the value of Result.
func (s *CreateSandboxOK) GetResult() string {
	return s.Result
}

// GetSandboxId returns the value of SandboxId.
func (s *CreateSandboxOK) GetSandboxId() int64 {
	return s.SandboxId
}

// GetSandboxStatusSSE returns the value of SandboxStatusSSE.
func (s *CreateSandboxOK) GetSandboxStatusSSE() OptString {
	return s.SandboxStatusSSE
}

// GetSandboxStatusWS returns the value of SandboxStatusWS.
func (s *CreateSandboxOK) GetSandboxStatusWS() OptString {
	return s.SandboxStatusWS
}

// SetResult sets the value of Result.
func (s *CreateSandboxOK) SetResult(val string) {
	s.Result = val
}

// SetSandboxId sets the value of SandboxId.
func (s *CreateSandboxOK) SetSandboxId(val int64) {
	s.SandboxId = val
}

// SetSandboxStatusSSE sets the value of SandboxStatusSSE.
func (s *CreateSandboxOK) SetSandboxStatusSSE(val OptString) {
	s.SandboxStatusSSE = val
}

// SetSandboxStatusWS sets the value of SandboxStatusWS.
func (s *CreateSandboxOK) SetSandboxStatusWS(val OptString) {
	s.SandboxStatusWS = val
}

func (*CreateSandboxOK) createSandboxRes() {}

type DeleteExecutionJobBadRequest Error

func (*DeleteExecutionJobBadRequest) deleteExecutionJobRes() {}

type DeleteExecutionJobForbidden Error

func (*DeleteExecutionJobForbidden) deleteExecutionJobRes() {}

type DeleteExecutionJobInternalServerError Error

func (*DeleteExecutionJobInternalServerError) deleteExecutionJobRes() {}

// DeleteExecutionJobNotFound is response for DeleteExecutionJob operation.
type DeleteExecutionJobNotFound struct{}

func (*DeleteExecutionJobNotFound) deleteExecutionJobRes() {}

// DeleteExecutionJobOK is response for DeleteExecutionJob operation.
type DeleteExecutionJobOK struct{}

func (*DeleteExecutionJobOK) deleteExecutionJobRes() {}

// Ref: #/components/schemas/EnvironmentVariable
type EnvironmentVariable struct {
	Key   OptString `json:"key"`
	Value OptString `json:"value"`
}

// GetKey returns the value of Key.
func (s *EnvironmentVariable) GetKey() OptString {
	return s.Key
}

// GetValue returns the value of Value.
func (s *EnvironmentVariable) GetValue() OptString {
	return s.Value
}

// SetKey sets the value of Key.
func (s *EnvironmentVariable) SetKey(val OptString) {
	s.Key = val
}

// SetValue sets the value of Value.
func (s *EnvironmentVariable) SetValue(val OptString) {
	s.Value = val
}

// Ref: #/components/schemas/Error
type Error struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

func (*Error) getSandboxRes() {}
func (*Error) getVersionRes() {}

type ExecuteBadRequest Error

func (*ExecuteBadRequest) executeRes() {}

type ExecuteInternalServerError Error

func (*ExecuteInternalServerError) executeRes() {}

type ExecuteOK struct {
	JobId  int64  `json:"jobId"`
	Events string `json:"events"`
}

// GetJobId returns the value of JobId.
func (s *ExecuteOK) GetJobId() int64 {
	return s.JobId
}

// GetEvents returns the value of Events.
func (s *ExecuteOK) GetEvents() string {
	return s.Events
}

// SetJobId sets the value of JobId.
func (s *ExecuteOK) SetJobId(val int64) {
	s.JobId = val
}

// SetEvents sets the value of Events.
func (s *ExecuteOK) SetEvents(val string) {
	s.Events = val
}

func (*ExecuteOK) executeRes() {}

// Ref: #/components/schemas/ExecutionConfig
type ExecutionConfig struct {
	// Represents the worker provider.
	ODINWORKERPROVIDER string `json:"ODIN_WORKER_PROVIDER"`
	// Represents the concurrency level for the worker.
	ODINWORKERCONCURRENCY int32 `json:"ODIN_WORKER_CONCURRENCY"`
	// Represents the buffer size for the worker.
	ODINWORKERBUFFERSIZE int32 `json:"ODIN_WORKER_BUFFER_SIZE"`
	// Represents the task timeout.
	ODINWORKERTASKTIMEOUT int `json:"ODIN_WORKER_TASK_TIMEOUT"`
	// Represents the polling frequency for the worker in seconds.
	ODINWORKERPOLLFREQ int `json:"ODIN_WORKER_POLL_FREQ"`
	// Represents the runtime for the worker in seconds.
	ODINWORKERRUNTIME string `json:"ODIN_WORKER_RUNTIME"`
	// Represents the log level.
	ODINLOGLEVEL string `json:"ODIN_LOG_LEVEL"`
	// Represents the base directory for the system provider.
	ODINSYSTEMPROVIDERBASEDIR OptString `json:"ODIN_SYSTEM_PROVIDER_BASE_DIR"`
	// Represents whether to clean up directories created by the system provider.
	ODINSYSTEMPROVIDERCLEANUP OptBool `json:"ODIN_SYSTEM_PROVIDER_CLEAN_UP"`
}

// GetODINWORKERPROVIDER returns the value of ODINWORKERPROVIDER.
func (s *ExecutionConfig) GetODINWORKERPROVIDER() string {
	return s.ODINWORKERPROVIDER
}

// GetODINWORKERCONCURRENCY returns the value of ODINWORKERCONCURRENCY.
func (s *ExecutionConfig) GetODINWORKERCONCURRENCY() int32 {
	return s.ODINWORKERCONCURRENCY
}

// GetODINWORKERBUFFERSIZE returns the value of ODINWORKERBUFFERSIZE.
func (s *ExecutionConfig) GetODINWORKERBUFFERSIZE() int32 {
	return s.ODINWORKERBUFFERSIZE
}

// GetODINWORKERTASKTIMEOUT returns the value of ODINWORKERTASKTIMEOUT.
func (s *ExecutionConfig) GetODINWORKERTASKTIMEOUT() int {
	return s.ODINWORKERTASKTIMEOUT
}

// GetODINWORKERPOLLFREQ returns the value of ODINWORKERPOLLFREQ.
func (s *ExecutionConfig) GetODINWORKERPOLLFREQ() int {
	return s.ODINWORKERPOLLFREQ
}

// GetODINWORKERRUNTIME returns the value of ODINWORKERRUNTIME.
func (s *ExecutionConfig) GetODINWORKERRUNTIME() string {
	return s.ODINWORKERRUNTIME
}

// GetODINLOGLEVEL returns the value of ODINLOGLEVEL.
func (s *ExecutionConfig) GetODINLOGLEVEL() string {
	return s.ODINLOGLEVEL
}

// GetODINSYSTEMPROVIDERBASEDIR returns the value of ODINSYSTEMPROVIDERBASEDIR.
func (s *ExecutionConfig) GetODINSYSTEMPROVIDERBASEDIR() OptString {
	return s.ODINSYSTEMPROVIDERBASEDIR
}

// GetODINSYSTEMPROVIDERCLEANUP returns the value of ODINSYSTEMPROVIDERCLEANUP.
func (s *ExecutionConfig) GetODINSYSTEMPROVIDERCLEANUP() OptBool {
	return s.ODINSYSTEMPROVIDERCLEANUP
}

// SetODINWORKERPROVIDER sets the value of ODINWORKERPROVIDER.
func (s *ExecutionConfig) SetODINWORKERPROVIDER(val string) {
	s.ODINWORKERPROVIDER = val
}

// SetODINWORKERCONCURRENCY sets the value of ODINWORKERCONCURRENCY.
func (s *ExecutionConfig) SetODINWORKERCONCURRENCY(val int32) {
	s.ODINWORKERCONCURRENCY = val
}

// SetODINWORKERBUFFERSIZE sets the value of ODINWORKERBUFFERSIZE.
func (s *ExecutionConfig) SetODINWORKERBUFFERSIZE(val int32) {
	s.ODINWORKERBUFFERSIZE = val
}

// SetODINWORKERTASKTIMEOUT sets the value of ODINWORKERTASKTIMEOUT.
func (s *ExecutionConfig) SetODINWORKERTASKTIMEOUT(val int) {
	s.ODINWORKERTASKTIMEOUT = val
}

// SetODINWORKERPOLLFREQ sets the value of ODINWORKERPOLLFREQ.
func (s *ExecutionConfig) SetODINWORKERPOLLFREQ(val int) {
	s.ODINWORKERPOLLFREQ = val
}

// SetODINWORKERRUNTIME sets the value of ODINWORKERRUNTIME.
func (s *ExecutionConfig) SetODINWORKERRUNTIME(val string) {
	s.ODINWORKERRUNTIME = val
}

// SetODINLOGLEVEL sets the value of ODINLOGLEVEL.
func (s *ExecutionConfig) SetODINLOGLEVEL(val string) {
	s.ODINLOGLEVEL = val
}

// SetODINSYSTEMPROVIDERBASEDIR sets the value of ODINSYSTEMPROVIDERBASEDIR.
func (s *ExecutionConfig) SetODINSYSTEMPROVIDERBASEDIR(val OptString) {
	s.ODINSYSTEMPROVIDERBASEDIR = val
}

// SetODINSYSTEMPROVIDERCLEANUP sets the value of ODINSYSTEMPROVIDERCLEANUP.
func (s *ExecutionConfig) SetODINSYSTEMPROVIDERCLEANUP(val OptBool) {
	s.ODINSYSTEMPROVIDERCLEANUP = val
}

func (*ExecutionConfig) getExecutionConfigRes() {}

// Ref: #/components/schemas/ExecutionEnvironmentSpec
type ExecutionEnvironmentSpec struct {
	EnvironmentVariables []EnvironmentVariable `json:"environment_variables"`
	LanguageDependencies []string              `json:"languageDependencies"`
	SystemDependencies   []string              `json:"systemDependencies"`
	Setup                OptString             `json:"setup"`
}

// GetEnvironmentVariables returns the value of EnvironmentVariables.
func (s *ExecutionEnvironmentSpec) GetEnvironmentVariables() []EnvironmentVariable {
	return s.EnvironmentVariables
}

// GetLanguageDependencies returns the value of LanguageDependencies.
func (s *ExecutionEnvironmentSpec) GetLanguageDependencies() []string {
	return s.LanguageDependencies
}

// GetSystemDependencies returns the value of SystemDependencies.
func (s *ExecutionEnvironmentSpec) GetSystemDependencies() []string {
	return s.SystemDependencies
}

// GetSetup returns the value of Setup.
func (s *ExecutionEnvironmentSpec) GetSetup() OptString {
	return s.Setup
}

// SetEnvironmentVariables sets the value of EnvironmentVariables.
func (s *ExecutionEnvironmentSpec) SetEnvironmentVariables(val []EnvironmentVariable) {
	s.EnvironmentVariables = val
}

// SetLanguageDependencies sets the value of LanguageDependencies.
func (s *ExecutionEnvironmentSpec) SetLanguageDependencies(val []string) {
	s.LanguageDependencies = val
}

// SetSystemDependencies sets the value of SystemDependencies.
func (s *ExecutionEnvironmentSpec) SetSystemDependencies(val []string) {
	s.SystemDependencies = val
}

// SetSetup sets the value of Setup.
func (s *ExecutionEnvironmentSpec) SetSetup(val OptString) {
	s.Setup = val
}

// Ref: #/components/schemas/ExecutionRequest
type ExecutionRequest struct {
	Environment  OptExecutionEnvironmentSpec `json:"environment"`
	Code         OptString                   `json:"code"`
	Language     OptString                   `json:"language"`
	Version      OptString                   `json:"version"`
	MaxRetries   OptInt                      `json:"max_retries"`
	Timeout      OptInt32                    `json:"timeout"`
	CmdLineArgs  OptString                   `json:"cmdLineArgs"`
	CompilerArgs OptString                   `json:"compilerArgs"`
	Command      OptString                   `json:"command"`
	Files        []byte                      `json:"files"`
	Input        OptString                   `json:"input"`
}

// GetEnvironment returns the value of Environment.
func (s *ExecutionRequest) GetEnvironment() OptExecutionEnvironmentSpec {
	return s.Environment
}

// GetCode returns the value of Code.
func (s *ExecutionRequest) GetCode() OptString {
	return s.Code
}

// GetLanguage returns the value of Language.
func (s *ExecutionRequest) GetLanguage() OptString {
	return s.Language
}

// GetVersion returns the value of Version.
func (s *ExecutionRequest) GetVersion() OptString {
	return s.Version
}

// GetMaxRetries returns the value of MaxRetries.
func (s *ExecutionRequest) GetMaxRetries() OptInt {
	return s.MaxRetries
}

// GetTimeout returns the value of Timeout.
func (s *ExecutionRequest) GetTimeout() OptInt32 {
	return s.Timeout
}

// GetCmdLineArgs returns the value of CmdLineArgs.
func (s *ExecutionRequest) GetCmdLineArgs() OptString {
	return s.CmdLineArgs
}

// GetCompilerArgs returns the value of CompilerArgs.
func (s *ExecutionRequest) GetCompilerArgs() OptString {
	return s.CompilerArgs
}

// GetCommand returns the value of Command.
func (s *ExecutionRequest) GetCommand() OptString {
	return s.Command
}

// GetFiles returns the value of Files.
func (s *ExecutionRequest) GetFiles() []byte {
	return s.Files
}

// GetInput returns the value of Input.
func (s *ExecutionRequest) GetInput() OptString {
	return s.Input
}

// SetEnvironment sets the value of Environment.
func (s *ExecutionRequest) SetEnvironment(val OptExecutionEnvironmentSpec) {
	s.Environment = val
}

// SetCode sets the value of Code.
func (s *ExecutionRequest) SetCode(val OptString) {
	s.Code = val
}

// SetLanguage sets the value of Language.
func (s *ExecutionRequest) SetLanguage(val OptString) {
	s.Language = val
}

// SetVersion sets the value of Version.
func (s *ExecutionRequest) SetVersion(val OptString) {
	s.Version = val
}

// SetMaxRetries sets the value of MaxRetries.
func (s *ExecutionRequest) SetMaxRetries(val OptInt) {
	s.MaxRetries = val
}

// SetTimeout sets the value of Timeout.
func (s *ExecutionRequest) SetTimeout(val OptInt32) {
	s.Timeout = val
}

// SetCmdLineArgs sets the value of CmdLineArgs.
func (s *ExecutionRequest) SetCmdLineArgs(val OptString) {
	s.CmdLineArgs = val
}

// SetCompilerArgs sets the value of CompilerArgs.
func (s *ExecutionRequest) SetCompilerArgs(val OptString) {
	s.CompilerArgs = val
}

// SetCommand sets the value of Command.
func (s *ExecutionRequest) SetCommand(val OptString) {
	s.Command = val
}

// SetFiles sets the value of Files.
func (s *ExecutionRequest) SetFiles(val []byte) {
	s.Files = val
}

// SetInput sets the value of Input.
func (s *ExecutionRequest) SetInput(val OptString) {
	s.Input = val
}

// Merged schema.
// Ref: #/components/schemas/ExecutionResult
type ExecutionResult struct {
	JobId  int64  `json:"jobId"`
	Script string `json:"script"`
	// Merged property.
	Flake     string    `json:"flake"`
	CreatedAt time.Time `json:"created_at"`
	// Merged property.
	StartedAt  time.Time   `json:"started_at"`
	UpdatedAt  OptDateTime `json:"updated_at"`
	ExecId     int64       `json:"execId"`
	FinishedAt time.Time   `json:"finished_at"`
	ExecLogs   string      `json:"exec_logs"`
	NixLogs    OptString   `json:"nix_logs"`
}

// GetJobId returns the value of JobId.
func (s *ExecutionResult) GetJobId() int64 {
	return s.JobId
}

// GetScript returns the value of Script.
func (s *ExecutionResult) GetScript() string {
	return s.Script
}

// GetFlake returns the value of Flake.
func (s *ExecutionResult) GetFlake() string {
	return s.Flake
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ExecutionResult) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetStartedAt returns the value of StartedAt.
func (s *ExecutionResult) GetStartedAt() time.Time {
	return s.StartedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ExecutionResult) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetExecId returns the value of ExecId.
func (s *ExecutionResult) GetExecId() int64 {
	return s.ExecId
}

// GetFinishedAt returns the value of FinishedAt.
func (s *ExecutionResult) GetFinishedAt() time.Time {
	return s.FinishedAt
}

// GetExecLogs returns the value of ExecLogs.
func (s *ExecutionResult) GetExecLogs() string {
	return s.ExecLogs
}

// GetNixLogs returns the value of NixLogs.
func (s *ExecutionResult) GetNixLogs() OptString {
	return s.NixLogs
}

// SetJobId sets the value of JobId.
func (s *ExecutionResult) SetJobId(val int64) {
	s.JobId = val
}

// SetScript sets the value of Script.
func (s *ExecutionResult) SetScript(val string) {
	s.Script = val
}

// SetFlake sets the value of Flake.
func (s *ExecutionResult) SetFlake(val string) {
	s.Flake = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ExecutionResult) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetStartedAt sets the value of StartedAt.
func (s *ExecutionResult) SetStartedAt(val time.Time) {
	s.StartedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ExecutionResult) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetExecId sets the value of ExecId.
func (s *ExecutionResult) SetExecId(val int64) {
	s.ExecId = val
}

// SetFinishedAt sets the value of FinishedAt.
func (s *ExecutionResult) SetFinishedAt(val time.Time) {
	s.FinishedAt = val
}

// SetExecLogs sets the value of ExecLogs.
func (s *ExecutionResult) SetExecLogs(val string) {
	s.ExecLogs = val
}

// SetNixLogs sets the value of NixLogs.
func (s *ExecutionResult) SetNixLogs(val OptString) {
	s.NixLogs = val
}

func (*ExecutionResult) getExecutionResultByIdRes() {}

type FetchFlakeForbidden Error

func (*FetchFlakeForbidden) fetchFlakeRes() {}

type FetchFlakeInternalServerError Error

func (*FetchFlakeInternalServerError) fetchFlakeRes() {}

type FetchFlakeOK struct {
	Flake string `json:"flake"`
}

// GetFlake returns the value of Flake.
func (s *FetchFlakeOK) GetFlake() string {
	return s.Flake
}

// SetFlake sets the value of Flake.
func (s *FetchFlakeOK) SetFlake(val string) {
	s.Flake = val
}

func (*FetchFlakeOK) fetchFlakeRes() {}

type FetchLanguagePackagesBadRequest Error

func (*FetchLanguagePackagesBadRequest) fetchLanguagePackagesRes() {}

type FetchLanguagePackagesForbidden Error

func (*FetchLanguagePackagesForbidden) fetchLanguagePackagesRes() {}

type FetchLanguagePackagesInternalServerError Error

func (*FetchLanguagePackagesInternalServerError) fetchLanguagePackagesRes() {}

type FetchLanguagePackagesOK struct {
	Packages []Package `json:"packages"`
}

// GetPackages returns the value of Packages.
func (s *FetchLanguagePackagesOK) GetPackages() []Package {
	return s.Packages
}

// SetPackages sets the value of Packages.
func (s *FetchLanguagePackagesOK) SetPackages(val []Package) {
	s.Packages = val
}

func (*FetchLanguagePackagesOK) fetchLanguagePackagesRes() {}

type FetchSystemPackagesBadRequest Error

func (*FetchSystemPackagesBadRequest) fetchSystemPackagesRes() {}

type FetchSystemPackagesForbidden Error

func (*FetchSystemPackagesForbidden) fetchSystemPackagesRes() {}

type FetchSystemPackagesInternalServerError Error

func (*FetchSystemPackagesInternalServerError) fetchSystemPackagesRes() {}

type FetchSystemPackagesOK struct {
	Packages []Package `json:"packages"`
}

// GetPackages returns the value of Packages.
func (s *FetchSystemPackagesOK) GetPackages() []Package {
	return s.Packages
}

// SetPackages sets the value of Packages.
func (s *FetchSystemPackagesOK) SetPackages(val []Package) {
	s.Packages = val
}

func (*FetchSystemPackagesOK) fetchSystemPackagesRes() {}

type GetAllExecutionJobsBadRequest Error

func (*GetAllExecutionJobsBadRequest) getAllExecutionJobsRes() {}

type GetAllExecutionJobsForbidden Error

func (*GetAllExecutionJobsForbidden) getAllExecutionJobsRes() {}

type GetAllExecutionJobsInternalServerError Error

func (*GetAllExecutionJobsInternalServerError) getAllExecutionJobsRes() {}

type GetAllExecutionJobsOK struct {
	Jobs       []Job              `json:"jobs"`
	Pagination PaginationResponse `json:"pagination"`
}

// GetJobs returns the value of Jobs.
func (s *GetAllExecutionJobsOK) GetJobs() []Job {
	return s.Jobs
}

// GetPagination returns the value of Pagination.
func (s *GetAllExecutionJobsOK) GetPagination() PaginationResponse {
	return s.Pagination
}

// SetJobs sets the value of Jobs.
func (s *GetAllExecutionJobsOK) SetJobs(val []Job) {
	s.Jobs = val
}

// SetPagination sets the value of Pagination.
func (s *GetAllExecutionJobsOK) SetPagination(val PaginationResponse) {
	s.Pagination = val
}

func (*GetAllExecutionJobsOK) getAllExecutionJobsRes() {}

type GetAllExecutionsBadRequest Error

func (*GetAllExecutionsBadRequest) getAllExecutionsRes() {}

type GetAllExecutionsForbidden Error

func (*GetAllExecutionsForbidden) getAllExecutionsRes() {}

type GetAllExecutionsInternalServerError Error

func (*GetAllExecutionsInternalServerError) getAllExecutionsRes() {}

type GetAllExecutionsOK struct {
	Executions []ExecutionResult  `json:"executions"`
	Pagination PaginationResponse `json:"pagination"`
}

// GetExecutions returns the value of Executions.
func (s *GetAllExecutionsOK) GetExecutions() []ExecutionResult {
	return s.Executions
}

// GetPagination returns the value of Pagination.
func (s *GetAllExecutionsOK) GetPagination() PaginationResponse {
	return s.Pagination
}

// SetExecutions sets the value of Executions.
func (s *GetAllExecutionsOK) SetExecutions(val []ExecutionResult) {
	s.Executions = val
}

// SetPagination sets the value of Pagination.
func (s *GetAllExecutionsOK) SetPagination(val PaginationResponse) {
	s.Pagination = val
}

func (*GetAllExecutionsOK) getAllExecutionsRes() {}

type GetAllLanguageVersionsForbidden Error

func (*GetAllLanguageVersionsForbidden) getAllLanguageVersionsRes() {}

type GetAllLanguageVersionsInternalServerError Error

func (*GetAllLanguageVersionsInternalServerError) getAllLanguageVersionsRes() {}

type GetAllLanguageVersionsOK struct {
	LanguageVersions []LanguageVersionResponse `json:"languageVersions"`
}

// GetLanguageVersions returns the value of LanguageVersions.
func (s *GetAllLanguageVersionsOK) GetLanguageVersions() []LanguageVersionResponse {
	return s.LanguageVersions
}

// SetLanguageVersions sets the value of LanguageVersions.
func (s *GetAllLanguageVersionsOK) SetLanguageVersions(val []LanguageVersionResponse) {
	s.LanguageVersions = val
}

func (*GetAllLanguageVersionsOK) getAllLanguageVersionsRes() {}

type GetAllLanguagesForbidden Error

func (*GetAllLanguagesForbidden) getAllLanguagesRes() {}

type GetAllLanguagesInternalServerError Error

func (*GetAllLanguagesInternalServerError) getAllLanguagesRes() {}

type GetAllLanguagesOK struct {
	Languages []LanguageResponse `json:"languages"`
}

// GetLanguages returns the value of Languages.
func (s *GetAllLanguagesOK) GetLanguages() []LanguageResponse {
	return s.Languages
}

// SetLanguages sets the value of Languages.
func (s *GetAllLanguagesOK) SetLanguages(val []LanguageResponse) {
	s.Languages = val
}

func (*GetAllLanguagesOK) getAllLanguagesRes() {}

type GetAllVersionsForbidden Error

func (*GetAllVersionsForbidden) getAllVersionsRes() {}

type GetAllVersionsInternalServerError Error

func (*GetAllVersionsInternalServerError) getAllVersionsRes() {}

type GetAllVersionsOK struct {
	LanguageVersions []LanguageVersionResponse `json:"languageVersions"`
}

// GetLanguageVersions returns the value of LanguageVersions.
func (s *GetAllVersionsOK) GetLanguageVersions() []LanguageVersionResponse {
	return s.LanguageVersions
}

// SetLanguageVersions sets the value of LanguageVersions.
func (s *GetAllVersionsOK) SetLanguageVersions(val []LanguageVersionResponse) {
	s.LanguageVersions = val
}

func (*GetAllVersionsOK) getAllVersionsRes() {}

type GetExecutionConfigForbidden Error

func (*GetExecutionConfigForbidden) getExecutionConfigRes() {}

type GetExecutionConfigInternalServerError Error

func (*GetExecutionConfigInternalServerError) getExecutionConfigRes() {}

type GetExecutionJobByIdBadRequest Error

func (*GetExecutionJobByIdBadRequest) getExecutionJobByIdRes() {}

type GetExecutionJobByIdInternalServerError Error

func (*GetExecutionJobByIdInternalServerError) getExecutionJobByIdRes() {}

// GetExecutionJobByIdNotFound is response for GetExecutionJobById operation.
type GetExecutionJobByIdNotFound struct{}

func (*GetExecutionJobByIdNotFound) getExecutionJobByIdRes() {}

type GetExecutionResultByIdBadRequest Error

func (*GetExecutionResultByIdBadRequest) getExecutionResultByIdRes() {}

type GetExecutionResultByIdInternalServerError Error

func (*GetExecutionResultByIdInternalServerError) getExecutionResultByIdRes() {}

// GetExecutionResultByIdNotFound is response for GetExecutionResultById operation.
type GetExecutionResultByIdNotFound struct{}

func (*GetExecutionResultByIdNotFound) getExecutionResultByIdRes() {}

type GetExecutionsForJobBadRequest Error

func (*GetExecutionsForJobBadRequest) getExecutionsForJobRes() {}

type GetExecutionsForJobInternalServerError Error

func (*GetExecutionsForJobInternalServerError) getExecutionsForJobRes() {}

// GetExecutionsForJobNotFound is response for GetExecutionsForJob operation.
type GetExecutionsForJobNotFound struct{}

func (*GetExecutionsForJobNotFound) getExecutionsForJobRes() {}

type GetExecutionsForJobOK struct {
	Executions []ExecutionResult  `json:"executions"`
	Pagination PaginationResponse `json:"pagination"`
}

// GetExecutions returns the value of Executions.
func (s *GetExecutionsForJobOK) GetExecutions() []ExecutionResult {
	return s.Executions
}

// GetPagination returns the value of Pagination.
func (s *GetExecutionsForJobOK) GetPagination() PaginationResponse {
	return s.Pagination
}

// SetExecutions sets the value of Executions.
func (s *GetExecutionsForJobOK) SetExecutions(val []ExecutionResult) {
	s.Executions = val
}

// SetPagination sets the value of Pagination.
func (s *GetExecutionsForJobOK) SetPagination(val PaginationResponse) {
	s.Pagination = val
}

func (*GetExecutionsForJobOK) getExecutionsForJobRes() {}

type GetLanguageByIdForbidden Error

func (*GetLanguageByIdForbidden) getLanguageByIdRes() {}

type GetLanguageByIdInternalServerError Error

func (*GetLanguageByIdInternalServerError) getLanguageByIdRes() {}

type GetLanguageByIdNotFound Error

func (*GetLanguageByIdNotFound) getLanguageByIdRes() {}

type GetLanguageByIdOK struct {
	Language LanguageResponse `json:"language"`
}

// GetLanguage returns the value of Language.
func (s *GetLanguageByIdOK) GetLanguage() LanguageResponse {
	return s.Language
}

// SetLanguage sets the value of Language.
func (s *GetLanguageByIdOK) SetLanguage(val LanguageResponse) {
	s.Language = val
}

func (*GetLanguageByIdOK) getLanguageByIdRes() {}

type GetLanguageVersionByIdForbidden Error

func (*GetLanguageVersionByIdForbidden) getLanguageVersionByIdRes() {}

type GetLanguageVersionByIdInternalServerError Error

func (*GetLanguageVersionByIdInternalServerError) getLanguageVersionByIdRes() {}

type GetLanguageVersionByIdNotFound Error

func (*GetLanguageVersionByIdNotFound) getLanguageVersionByIdRes() {}

type GetLanguageVersionByIdOK struct {
	Language LanguageVersionResponse `json:"language"`
}

// GetLanguage returns the value of Language.
func (s *GetLanguageVersionByIdOK) GetLanguage() LanguageVersionResponse {
	return s.Language
}

// SetLanguage sets the value of Language.
func (s *GetLanguageVersionByIdOK) SetLanguage(val LanguageVersionResponse) {
	s.Language = val
}

func (*GetLanguageVersionByIdOK) getLanguageVersionByIdRes() {}

// GetSandboxOK represents sum type.
type GetSandboxOK struct {
	Type         GetSandboxOKType // switch on this field
	Sandbox      Sandbox
	SandboxState SandboxState
}

// GetSandboxOKType is oneOf type of GetSandboxOK.
type GetSandboxOKType string

// Possible values for GetSandboxOKType.
const (
	SandboxGetSandboxOK      GetSandboxOKType = "Sandbox"
	SandboxStateGetSandboxOK GetSandboxOKType = "SandboxState"
)

// IsSandbox reports whether GetSandboxOK is Sandbox.
func (s GetSandboxOK) IsSandbox() bool { return s.Type == SandboxGetSandboxOK }

// IsSandboxState reports whether GetSandboxOK is SandboxState.
func (s GetSandboxOK) IsSandboxState() bool { return s.Type == SandboxStateGetSandboxOK }

// SetSandbox sets GetSandboxOK to Sandbox.
func (s *GetSandboxOK) SetSandbox(v Sandbox) {
	s.Type = SandboxGetSandboxOK
	s.Sandbox = v
}

// GetSandbox returns Sandbox and true boolean if GetSandboxOK is Sandbox.
func (s GetSandboxOK) GetSandbox() (v Sandbox, ok bool) {
	if !s.IsSandbox() {
		return v, false
	}
	return s.Sandbox, true
}

// NewSandboxGetSandboxOK returns new GetSandboxOK from Sandbox.
func NewSandboxGetSandboxOK(v Sandbox) GetSandboxOK {
	var s GetSandboxOK
	s.SetSandbox(v)
	return s
}

// SetSandboxState sets GetSandboxOK to SandboxState.
func (s *GetSandboxOK) SetSandboxState(v SandboxState) {
	s.Type = SandboxStateGetSandboxOK
	s.SandboxState = v
}

// GetSandboxState returns SandboxState and true boolean if GetSandboxOK is SandboxState.
func (s GetSandboxOK) GetSandboxState() (v SandboxState, ok bool) {
	if !s.IsSandboxState() {
		return v, false
	}
	return s.SandboxState, true
}

// NewSandboxStateGetSandboxOK returns new GetSandboxOK from SandboxState.
func NewSandboxStateGetSandboxOK(v SandboxState) GetSandboxOK {
	var s GetSandboxOK
	s.SetSandboxState(v)
	return s
}

func (*GetSandboxOK) getSandboxRes() {}

type GetVersionOK struct {
	Version string `json:"version"`
}

// GetVersion returns the value of Version.
func (s *GetVersionOK) GetVersion() string {
	return s.Version
}

// SetVersion sets the value of Version.
func (s *GetVersionOK) SetVersion(val string) {
	s.Version = val
}

func (*GetVersionOK) getVersionRes() {}

// HealthOK is response for Health operation.
type HealthOK struct{}

// Ref: #/components/schemas/Job
type Job struct {
	JobId     int64       `json:"jobId"`
	Script    string      `json:"script"`
	Flake     string      `json:"flake"`
	CreatedAt time.Time   `json:"created_at"`
	StartedAt OptDateTime `json:"started_at"`
	UpdatedAt OptDateTime `json:"updated_at"`
}

// GetJobId returns the value of JobId.
func (s *Job) GetJobId() int64 {
	return s.JobId
}

// GetScript returns the value of Script.
func (s *Job) GetScript() string {
	return s.Script
}

// GetFlake returns the value of Flake.
func (s *Job) GetFlake() string {
	return s.Flake
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Job) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetStartedAt returns the value of StartedAt.
func (s *Job) GetStartedAt() OptDateTime {
	return s.StartedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Job) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetJobId sets the value of JobId.
func (s *Job) SetJobId(val int64) {
	s.JobId = val
}

// SetScript sets the value of Script.
func (s *Job) SetScript(val string) {
	s.Script = val
}

// SetFlake sets the value of Flake.
func (s *Job) SetFlake(val string) {
	s.Flake = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Job) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetStartedAt sets the value of StartedAt.
func (s *Job) SetStartedAt(val OptDateTime) {
	s.StartedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Job) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

func (*Job) getExecutionJobByIdRes() {}

// Merged schema.
// Ref: #/components/schemas/LanguageResponse
type LanguageResponse struct {
	// Merged property.
	Name string `json:"name"`
	// Merged property.
	Extension string `json:"extension"`
	// Merged property.
	MonacoLanguage string `json:"monaco_language"`
	// Merged property.
	DefaultCode string `json:"default_code"`
	// The default template for the language.
	Template string `json:"template"`
	// Unique identifier for the language version.
	ID int64 `json:"id"`
}

// GetName returns the value of Name.
func (s *LanguageResponse) GetName() string {
	return s.Name
}

// GetExtension returns the value of Extension.
func (s *LanguageResponse) GetExtension() string {
	return s.Extension
}

// GetMonacoLanguage returns the value of MonacoLanguage.
func (s *LanguageResponse) GetMonacoLanguage() string {
	return s.MonacoLanguage
}

// GetDefaultCode returns the value of DefaultCode.
func (s *LanguageResponse) GetDefaultCode() string {
	return s.DefaultCode
}

// GetTemplate returns the value of Template.
func (s *LanguageResponse) GetTemplate() string {
	return s.Template
}

// GetID returns the value of ID.
func (s *LanguageResponse) GetID() int64 {
	return s.ID
}

// SetName sets the value of Name.
func (s *LanguageResponse) SetName(val string) {
	s.Name = val
}

// SetExtension sets the value of Extension.
func (s *LanguageResponse) SetExtension(val string) {
	s.Extension = val
}

// SetMonacoLanguage sets the value of MonacoLanguage.
func (s *LanguageResponse) SetMonacoLanguage(val string) {
	s.MonacoLanguage = val
}

// SetDefaultCode sets the value of DefaultCode.
func (s *LanguageResponse) SetDefaultCode(val string) {
	s.DefaultCode = val
}

// SetTemplate sets the value of Template.
func (s *LanguageResponse) SetTemplate(val string) {
	s.Template = val
}

// SetID sets the value of ID.
func (s *LanguageResponse) SetID(val int64) {
	s.ID = val
}

// Merged schema.
// Ref: #/components/schemas/LanguageVersionResponse
type LanguageVersionResponse struct {
	// Reference to the parent language.
	LanguageID int64 `json:"language_id"`
	// Version identifier of the language.
	Version string `json:"version"`
	// Name of the Nix package.
	NixPackageName string `json:"nix_package_name"`
	Template       string `json:"template"`
	// Search query string.
	SearchQuery string `json:"search_query"`
	// Whether this is the default version of the language.
	DefaultVersion bool `json:"default_version"`
	// Unique identifier for the language version.
	ID int64 `json:"id"`
}

// GetLanguageID returns the value of LanguageID.
func (s *LanguageVersionResponse) GetLanguageID() int64 {
	return s.LanguageID
}

// GetVersion returns the value of Version.
func (s *LanguageVersionResponse) GetVersion() string {
	return s.Version
}

// GetNixPackageName returns the value of NixPackageName.
func (s *LanguageVersionResponse) GetNixPackageName() string {
	return s.NixPackageName
}

// GetTemplate returns the value of Template.
func (s *LanguageVersionResponse) GetTemplate() string {
	return s.Template
}

// GetSearchQuery returns the value of SearchQuery.
func (s *LanguageVersionResponse) GetSearchQuery() string {
	return s.SearchQuery
}

// GetDefaultVersion returns the value of DefaultVersion.
func (s *LanguageVersionResponse) GetDefaultVersion() bool {
	return s.DefaultVersion
}

// GetID returns the value of ID.
func (s *LanguageVersionResponse) GetID() int64 {
	return s.ID
}

// SetLanguageID sets the value of LanguageID.
func (s *LanguageVersionResponse) SetLanguageID(val int64) {
	s.LanguageID = val
}

// SetVersion sets the value of Version.
func (s *LanguageVersionResponse) SetVersion(val string) {
	s.Version = val
}

// SetNixPackageName sets the value of NixPackageName.
func (s *LanguageVersionResponse) SetNixPackageName(val string) {
	s.NixPackageName = val
}

// SetTemplate sets the value of Template.
func (s *LanguageVersionResponse) SetTemplate(val string) {
	s.Template = val
}

// SetSearchQuery sets the value of SearchQuery.
func (s *LanguageVersionResponse) SetSearchQuery(val string) {
	s.SearchQuery = val
}

// SetDefaultVersion sets the value of DefaultVersion.
func (s *LanguageVersionResponse) SetDefaultVersion(val bool) {
	s.DefaultVersion = val
}

// SetID sets the value of ID.
func (s *LanguageVersionResponse) SetID(val int64) {
	s.ID = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateSandbox returns new OptCreateSandbox with value set to v.
func NewOptCreateSandbox(v CreateSandbox) OptCreateSandbox {
	return OptCreateSandbox{
		Value: v,
		Set:   true,
	}
}

// OptCreateSandbox is optional CreateSandbox.
type OptCreateSandbox struct {
	Value CreateSandbox
	Set   bool
}

// IsSet returns true if OptCreateSandbox was set.
func (o OptCreateSandbox) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateSandbox) Reset() {
	var v CreateSandbox
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateSandbox) SetTo(v CreateSandbox) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateSandbox) Get() (v CreateSandbox, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateSandbox) Or(d CreateSandbox) CreateSandbox {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutionEnvironmentSpec returns new OptExecutionEnvironmentSpec with value set to v.
func NewOptExecutionEnvironmentSpec(v ExecutionEnvironmentSpec) OptExecutionEnvironmentSpec {
	return OptExecutionEnvironmentSpec{
		Value: v,
		Set:   true,
	}
}

// OptExecutionEnvironmentSpec is optional ExecutionEnvironmentSpec.
type OptExecutionEnvironmentSpec struct {
	Value ExecutionEnvironmentSpec
	Set   bool
}

// IsSet returns true if OptExecutionEnvironmentSpec was set.
func (o OptExecutionEnvironmentSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutionEnvironmentSpec) Reset() {
	var v ExecutionEnvironmentSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutionEnvironmentSpec) SetTo(v ExecutionEnvironmentSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutionEnvironmentSpec) Get() (v ExecutionEnvironmentSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutionEnvironmentSpec) Or(d ExecutionEnvironmentSpec) ExecutionEnvironmentSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Package
type Package struct {
	// Name of the package.
	Name string `json:"name"`
	// Version of the package.
	Version string `json:"version"`
}

// GetName returns the value of Name.
func (s *Package) GetName() string {
	return s.Name
}

// GetVersion returns the value of Version.
func (s *Package) GetVersion() string {
	return s.Version
}

// SetName sets the value of Name.
func (s *Package) SetName(val string) {
	s.Name = val
}

// SetVersion sets the value of Version.
func (s *Package) SetVersion(val string) {
	s.Version = val
}

// Ref: #/components/schemas/PackageExistRequest
type PackageExistRequest struct {
	// The language to check the packages against.
	Language string `json:"language"`
	// List of packages to verify.
	Packages []string `json:"packages"`
}

// GetLanguage returns the value of Language.
func (s *PackageExistRequest) GetLanguage() string {
	return s.Language
}

// GetPackages returns the value of Packages.
func (s *PackageExistRequest) GetPackages() []string {
	return s.Packages
}

// SetLanguage sets the value of Language.
func (s *PackageExistRequest) SetLanguage(val string) {
	s.Language = val
}

// SetPackages sets the value of Packages.
func (s *PackageExistRequest) SetPackages(val []string) {
	s.Packages = val
}

type PackagesExistBadRequest Error

func (*PackagesExistBadRequest) packagesExistRes() {}

type PackagesExistForbidden Error

func (*PackagesExistForbidden) packagesExistRes() {}

type PackagesExistInternalServerError Error

func (*PackagesExistInternalServerError) packagesExistRes() {}

type PackagesExistOK struct {
	// Indicate all packages' existance for given language.
	Exists bool `json:"exists"`
	// List of packages that do not exist for the language.
	NonExistingPackages []string `json:"nonExistingPackages"`
}

// GetExists returns the value of Exists.
func (s *PackagesExistOK) GetExists() bool {
	return s.Exists
}

// GetNonExistingPackages returns the value of NonExistingPackages.
func (s *PackagesExistOK) GetNonExistingPackages() []string {
	return s.NonExistingPackages
}

// SetExists sets the value of Exists.
func (s *PackagesExistOK) SetExists(val bool) {
	s.Exists = val
}

// SetNonExistingPackages sets the value of NonExistingPackages.
func (s *PackagesExistOK) SetNonExistingPackages(val []string) {
	s.NonExistingPackages = val
}

func (*PackagesExistOK) packagesExistRes() {}

// Ref: #/components/schemas/PaginationResponse
type PaginationResponse struct {
	// Represents the total number of items.
	Total int64 `json:"total"`
	// Represents the number of items per page.
	Limit int64 `json:"limit"`
	// Represents the start of the cursor.
	Cursor int64 `json:"cursor"`
}

// GetTotal returns the value of Total.
func (s *PaginationResponse) GetTotal() int64 {
	return s.Total
}

// GetLimit returns the value of Limit.
func (s *PaginationResponse) GetLimit() int64 {
	return s.Limit
}

// GetCursor returns the value of Cursor.
func (s *PaginationResponse) GetCursor() int64 {
	return s.Cursor
}

// SetTotal sets the value of Total.
func (s *PaginationResponse) SetTotal(val int64) {
	s.Total = val
}

// SetLimit sets the value of Limit.
func (s *PaginationResponse) SetLimit(val int64) {
	s.Limit = val
}

// SetCursor sets the value of Cursor.
func (s *PaginationResponse) SetCursor(val int64) {
	s.Cursor = val
}

// Ref: #/components/schemas/Sandbox
type Sandbox struct {
	SandboxId int64     `json:"sandboxId"`
	State     string    `json:"state"`
	URL       string    `json:"URL"`
	AgentURL  string    `json:"agentURL"`
	CreatedAt time.Time `json:"created_at"`
}

// GetSandboxId returns the value of SandboxId.
func (s *Sandbox) GetSandboxId() int64 {
	return s.SandboxId
}

// GetState returns the value of State.
func (s *Sandbox) GetState() string {
	return s.State
}

// GetURL returns the value of URL.
func (s *Sandbox) GetURL() string {
	return s.URL
}

// GetAgentURL returns the value of AgentURL.
func (s *Sandbox) GetAgentURL() string {
	return s.AgentURL
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Sandbox) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetSandboxId sets the value of SandboxId.
func (s *Sandbox) SetSandboxId(val int64) {
	s.SandboxId = val
}

// SetState sets the value of State.
func (s *Sandbox) SetState(val string) {
	s.State = val
}

// SetURL sets the value of URL.
func (s *Sandbox) SetURL(val string) {
	s.URL = val
}

// SetAgentURL sets the value of AgentURL.
func (s *Sandbox) SetAgentURL(val string) {
	s.AgentURL = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Sandbox) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// Ref: #/components/schemas/SandboxState
type SandboxState struct {
	SandboxId int64  `json:"sandboxId"`
	State     string `json:"state"`
}

// GetSandboxId returns the value of SandboxId.
func (s *SandboxState) GetSandboxId() int64 {
	return s.SandboxId
}

// GetState returns the value of State.
func (s *SandboxState) GetState() string {
	return s.State
}

// SetSandboxId sets the value of SandboxId.
func (s *SandboxState) SetSandboxId(val int64) {
	s.SandboxId = val
}

// SetState sets the value of State.
func (s *SandboxState) SetState(val string) {
	s.State = val
}

type SearchLanguagePackagesBadRequest Error

func (*SearchLanguagePackagesBadRequest) searchLanguagePackagesRes() {}

type SearchLanguagePackagesForbidden Error

func (*SearchLanguagePackagesForbidden) searchLanguagePackagesRes() {}

type SearchLanguagePackagesOK struct {
	Packages []Package `json:"packages"`
}

// GetPackages returns the value of Packages.
func (s *SearchLanguagePackagesOK) GetPackages() []Package {
	return s.Packages
}

// SetPackages sets the value of Packages.
func (s *SearchLanguagePackagesOK) SetPackages(val []Package) {
	s.Packages = val
}

func (*SearchLanguagePackagesOK) searchLanguagePackagesRes() {}

type SearchSystemPackagesBadRequest Error

func (*SearchSystemPackagesBadRequest) searchSystemPackagesRes() {}

type SearchSystemPackagesForbidden Error

func (*SearchSystemPackagesForbidden) searchSystemPackagesRes() {}

type SearchSystemPackagesOK struct {
	Packages []Package `json:"packages"`
}

// GetPackages returns the value of Packages.
func (s *SearchSystemPackagesOK) GetPackages() []Package {
	return s.Packages
}

// SetPackages sets the value of Packages.
func (s *SearchSystemPackagesOK) SetPackages(val []Package) {
	s.Packages = val
}

func (*SearchSystemPackagesOK) searchSystemPackagesRes() {}
