// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"
)

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

type CancelExecutionJobBadRequest Error

func (*CancelExecutionJobBadRequest) cancelExecutionJobRes() {}

// CancelExecutionJobForbidden is response for CancelExecutionJob operation.
type CancelExecutionJobForbidden struct{}

func (*CancelExecutionJobForbidden) cancelExecutionJobRes() {}

type CancelExecutionJobInternalServerError Error

func (*CancelExecutionJobInternalServerError) cancelExecutionJobRes() {}

type CancelExecutionJobOK struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *CancelExecutionJobOK) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *CancelExecutionJobOK) SetMessage(val string) {
	s.Message = val
}

func (*CancelExecutionJobOK) cancelExecutionJobRes() {}

type DeleteExecutionJobBadRequest Error

func (*DeleteExecutionJobBadRequest) deleteExecutionJobRes() {}

// DeleteExecutionJobForbidden is response for DeleteExecutionJob operation.
type DeleteExecutionJobForbidden struct{}

func (*DeleteExecutionJobForbidden) deleteExecutionJobRes() {}

type DeleteExecutionJobInternalServerError Error

func (*DeleteExecutionJobInternalServerError) deleteExecutionJobRes() {}

// DeleteExecutionJobNotFound is response for DeleteExecutionJob operation.
type DeleteExecutionJobNotFound struct{}

func (*DeleteExecutionJobNotFound) deleteExecutionJobRes() {}

// DeleteExecutionJobOK is response for DeleteExecutionJob operation.
type DeleteExecutionJobOK struct{}

func (*DeleteExecutionJobOK) deleteExecutionJobRes() {}

type DeleteExecutionWorkerBadRequest Error

func (*DeleteExecutionWorkerBadRequest) deleteExecutionWorkerRes() {}

type DeleteExecutionWorkerInternalServerError Error

func (*DeleteExecutionWorkerInternalServerError) deleteExecutionWorkerRes() {}

// DeleteExecutionWorkerNotFound is response for DeleteExecutionWorker operation.
type DeleteExecutionWorkerNotFound struct{}

func (*DeleteExecutionWorkerNotFound) deleteExecutionWorkerRes() {}

type DeleteExecutionWorkerOK struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *DeleteExecutionWorkerOK) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *DeleteExecutionWorkerOK) SetMessage(val string) {
	s.Message = val
}

func (*DeleteExecutionWorkerOK) deleteExecutionWorkerRes() {}

// Ref: #/components/schemas/DockerExecutionConfig
type DockerExecutionConfig struct {
	ContainerConfig OptDockerExecutionConfigContainerConfig `json:"containerConfig"`
	HostConfig      OptDockerExecutionConfigHostConfig      `json:"HostConfig"`
}

// GetContainerConfig returns the value of ContainerConfig.
func (s *DockerExecutionConfig) GetContainerConfig() OptDockerExecutionConfigContainerConfig {
	return s.ContainerConfig
}

// GetHostConfig returns the value of HostConfig.
func (s *DockerExecutionConfig) GetHostConfig() OptDockerExecutionConfigHostConfig {
	return s.HostConfig
}

// SetContainerConfig sets the value of ContainerConfig.
func (s *DockerExecutionConfig) SetContainerConfig(val OptDockerExecutionConfigContainerConfig) {
	s.ContainerConfig = val
}

// SetHostConfig sets the value of HostConfig.
func (s *DockerExecutionConfig) SetHostConfig(val OptDockerExecutionConfigHostConfig) {
	s.HostConfig = val
}

type DockerExecutionConfigContainerConfig struct {
	Image OptString `json:"image"`
}

// GetImage returns the value of Image.
func (s *DockerExecutionConfigContainerConfig) GetImage() OptString {
	return s.Image
}

// SetImage sets the value of Image.
func (s *DockerExecutionConfigContainerConfig) SetImage(val OptString) {
	s.Image = val
}

type DockerExecutionConfigHostConfig struct {
	Resources OptDockerExecutionConfigHostConfigResources `json:"Resources"`
	Runtime   OptString                                   `json:"Runtime"`
}

// GetResources returns the value of Resources.
func (s *DockerExecutionConfigHostConfig) GetResources() OptDockerExecutionConfigHostConfigResources {
	return s.Resources
}

// GetRuntime returns the value of Runtime.
func (s *DockerExecutionConfigHostConfig) GetRuntime() OptString {
	return s.Runtime
}

// SetResources sets the value of Resources.
func (s *DockerExecutionConfigHostConfig) SetResources(val OptDockerExecutionConfigHostConfigResources) {
	s.Resources = val
}

// SetRuntime sets the value of Runtime.
func (s *DockerExecutionConfigHostConfig) SetRuntime(val OptString) {
	s.Runtime = val
}

type DockerExecutionConfigHostConfigResources struct {
	Memory   OptInt `json:"Memory"`
	NanoCPUs OptInt `json:"NanoCPUs"`
}

// GetMemory returns the value of Memory.
func (s *DockerExecutionConfigHostConfigResources) GetMemory() OptInt {
	return s.Memory
}

// GetNanoCPUs returns the value of NanoCPUs.
func (s *DockerExecutionConfigHostConfigResources) GetNanoCPUs() OptInt {
	return s.NanoCPUs
}

// SetMemory sets the value of Memory.
func (s *DockerExecutionConfigHostConfigResources) SetMemory(val OptInt) {
	s.Memory = val
}

// SetNanoCPUs sets the value of NanoCPUs.
func (s *DockerExecutionConfigHostConfigResources) SetNanoCPUs(val OptInt) {
	s.NanoCPUs = val
}

// Ref: #/components/schemas/EnvironmentVariable
type EnvironmentVariable struct {
	Key   OptString `json:"key"`
	Value OptString `json:"value"`
}

// GetKey returns the value of Key.
func (s *EnvironmentVariable) GetKey() OptString {
	return s.Key
}

// GetValue returns the value of Value.
func (s *EnvironmentVariable) GetValue() OptString {
	return s.Value
}

// SetKey sets the value of Key.
func (s *EnvironmentVariable) SetKey(val OptString) {
	s.Key = val
}

// SetValue sets the value of Value.
func (s *EnvironmentVariable) SetValue(val OptString) {
	s.Value = val
}

// Ref: #/components/schemas/Error
type Error struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

func (*Error) getExecutionConfigRes() {}
func (*Error) getVersionRes()         {}
func (*Error) searchPackagesRes()     {}

type ExecuteBadRequest Error

func (*ExecuteBadRequest) executeRes() {}

type ExecuteInternalServerError Error

func (*ExecuteInternalServerError) executeRes() {}

type ExecuteOK struct {
	JobId  int64  `json:"jobId"`
	Events string `json:"events"`
}

// GetJobId returns the value of JobId.
func (s *ExecuteOK) GetJobId() int64 {
	return s.JobId
}

// GetEvents returns the value of Events.
func (s *ExecuteOK) GetEvents() string {
	return s.Events
}

// SetJobId sets the value of JobId.
func (s *ExecuteOK) SetJobId(val int64) {
	s.JobId = val
}

// SetEvents sets the value of Events.
func (s *ExecuteOK) SetEvents(val string) {
	s.Events = val
}

func (*ExecuteOK) executeRes() {}

// Ref: #/components/schemas/ExecutionConfig
type ExecutionConfig struct {
	// Represents the worker provider.
	ODINWORKERPROVIDER string `json:"ODIN_WORKER_PROVIDER"`
	// Represents the concurrency level for the worker.
	ODINWORKERCONCURRENCY int32 `json:"ODIN_WORKER_CONCURRENCY"`
	// Represents the buffer size for the worker.
	ODINWORKERBUFFERSIZE int32 `json:"ODIN_WORKER_BUFFER_SIZE"`
	// Represents the task timeout.
	ODINWORKERTASKTIMEOUT int `json:"ODIN_WORKER_TASK_TIMEOUT"`
	// Represents the polling frequency for the worker in seconds.
	ODINWORKERPOLLFREQ int `json:"ODIN_WORKER_POLL_FREQ"`
	// Represents the runtime for the worker in seconds.
	ODINWORKERRUNTIME string `json:"ODIN_WORKER_RUNTIME"`
	// Represents the log level.
	ODINLOGLEVEL string `json:"ODIN_LOG_LEVEL"`
	// Represents the base directory for the system provider.
	ODINSYSTEMPROVIDERBASEDIR OptString `json:"ODIN_SYSTEM_PROVIDER_BASE_DIR"`
	// Represents whether to clean up directories created by the system provider.
	ODINSYSTEMPROVIDERCLEANUP OptBool `json:"ODIN_SYSTEM_PROVIDER_CLEAN_UP"`
}

// GetODINWORKERPROVIDER returns the value of ODINWORKERPROVIDER.
func (s *ExecutionConfig) GetODINWORKERPROVIDER() string {
	return s.ODINWORKERPROVIDER
}

// GetODINWORKERCONCURRENCY returns the value of ODINWORKERCONCURRENCY.
func (s *ExecutionConfig) GetODINWORKERCONCURRENCY() int32 {
	return s.ODINWORKERCONCURRENCY
}

// GetODINWORKERBUFFERSIZE returns the value of ODINWORKERBUFFERSIZE.
func (s *ExecutionConfig) GetODINWORKERBUFFERSIZE() int32 {
	return s.ODINWORKERBUFFERSIZE
}

// GetODINWORKERTASKTIMEOUT returns the value of ODINWORKERTASKTIMEOUT.
func (s *ExecutionConfig) GetODINWORKERTASKTIMEOUT() int {
	return s.ODINWORKERTASKTIMEOUT
}

// GetODINWORKERPOLLFREQ returns the value of ODINWORKERPOLLFREQ.
func (s *ExecutionConfig) GetODINWORKERPOLLFREQ() int {
	return s.ODINWORKERPOLLFREQ
}

// GetODINWORKERRUNTIME returns the value of ODINWORKERRUNTIME.
func (s *ExecutionConfig) GetODINWORKERRUNTIME() string {
	return s.ODINWORKERRUNTIME
}

// GetODINLOGLEVEL returns the value of ODINLOGLEVEL.
func (s *ExecutionConfig) GetODINLOGLEVEL() string {
	return s.ODINLOGLEVEL
}

// GetODINSYSTEMPROVIDERBASEDIR returns the value of ODINSYSTEMPROVIDERBASEDIR.
func (s *ExecutionConfig) GetODINSYSTEMPROVIDERBASEDIR() OptString {
	return s.ODINSYSTEMPROVIDERBASEDIR
}

// GetODINSYSTEMPROVIDERCLEANUP returns the value of ODINSYSTEMPROVIDERCLEANUP.
func (s *ExecutionConfig) GetODINSYSTEMPROVIDERCLEANUP() OptBool {
	return s.ODINSYSTEMPROVIDERCLEANUP
}

// SetODINWORKERPROVIDER sets the value of ODINWORKERPROVIDER.
func (s *ExecutionConfig) SetODINWORKERPROVIDER(val string) {
	s.ODINWORKERPROVIDER = val
}

// SetODINWORKERCONCURRENCY sets the value of ODINWORKERCONCURRENCY.
func (s *ExecutionConfig) SetODINWORKERCONCURRENCY(val int32) {
	s.ODINWORKERCONCURRENCY = val
}

// SetODINWORKERBUFFERSIZE sets the value of ODINWORKERBUFFERSIZE.
func (s *ExecutionConfig) SetODINWORKERBUFFERSIZE(val int32) {
	s.ODINWORKERBUFFERSIZE = val
}

// SetODINWORKERTASKTIMEOUT sets the value of ODINWORKERTASKTIMEOUT.
func (s *ExecutionConfig) SetODINWORKERTASKTIMEOUT(val int) {
	s.ODINWORKERTASKTIMEOUT = val
}

// SetODINWORKERPOLLFREQ sets the value of ODINWORKERPOLLFREQ.
func (s *ExecutionConfig) SetODINWORKERPOLLFREQ(val int) {
	s.ODINWORKERPOLLFREQ = val
}

// SetODINWORKERRUNTIME sets the value of ODINWORKERRUNTIME.
func (s *ExecutionConfig) SetODINWORKERRUNTIME(val string) {
	s.ODINWORKERRUNTIME = val
}

// SetODINLOGLEVEL sets the value of ODINLOGLEVEL.
func (s *ExecutionConfig) SetODINLOGLEVEL(val string) {
	s.ODINLOGLEVEL = val
}

// SetODINSYSTEMPROVIDERBASEDIR sets the value of ODINSYSTEMPROVIDERBASEDIR.
func (s *ExecutionConfig) SetODINSYSTEMPROVIDERBASEDIR(val OptString) {
	s.ODINSYSTEMPROVIDERBASEDIR = val
}

// SetODINSYSTEMPROVIDERCLEANUP sets the value of ODINSYSTEMPROVIDERCLEANUP.
func (s *ExecutionConfig) SetODINSYSTEMPROVIDERCLEANUP(val OptBool) {
	s.ODINSYSTEMPROVIDERCLEANUP = val
}

func (*ExecutionConfig) getExecutionConfigRes() {}

// Ref: #/components/schemas/ExecutionEnvironmentSpec
type ExecutionEnvironmentSpec struct {
	EnvironmentVariables []EnvironmentVariable `json:"environment_variables"`
	LanguageDependencies []string              `json:"languageDependencies"`
	SystemDependencies   []string              `json:"systemDependencies"`
	Args                 OptString             `json:"args"`
}

// GetEnvironmentVariables returns the value of EnvironmentVariables.
func (s *ExecutionEnvironmentSpec) GetEnvironmentVariables() []EnvironmentVariable {
	return s.EnvironmentVariables
}

// GetLanguageDependencies returns the value of LanguageDependencies.
func (s *ExecutionEnvironmentSpec) GetLanguageDependencies() []string {
	return s.LanguageDependencies
}

// GetSystemDependencies returns the value of SystemDependencies.
func (s *ExecutionEnvironmentSpec) GetSystemDependencies() []string {
	return s.SystemDependencies
}

// GetArgs returns the value of Args.
func (s *ExecutionEnvironmentSpec) GetArgs() OptString {
	return s.Args
}

// SetEnvironmentVariables sets the value of EnvironmentVariables.
func (s *ExecutionEnvironmentSpec) SetEnvironmentVariables(val []EnvironmentVariable) {
	s.EnvironmentVariables = val
}

// SetLanguageDependencies sets the value of LanguageDependencies.
func (s *ExecutionEnvironmentSpec) SetLanguageDependencies(val []string) {
	s.LanguageDependencies = val
}

// SetSystemDependencies sets the value of SystemDependencies.
func (s *ExecutionEnvironmentSpec) SetSystemDependencies(val []string) {
	s.SystemDependencies = val
}

// SetArgs sets the value of Args.
func (s *ExecutionEnvironmentSpec) SetArgs(val OptString) {
	s.Args = val
}

// Ref: #/components/schemas/ExecutionRequest
type ExecutionRequest struct {
	Environment OptExecutionRequestEnvironment `json:"environment"`
	Config      OptExecutionRequestConfig      `json:"config"`
	Code        string                         `json:"code"`
	Language    string                         `json:"language"`
	MaxRetries  OptInt                         `json:"max_retries"`
	Timeout     OptInt32                       `json:"timeout"`
	Priority    OptInt                         `json:"priority"`
}

// GetEnvironment returns the value of Environment.
func (s *ExecutionRequest) GetEnvironment() OptExecutionRequestEnvironment {
	return s.Environment
}

// GetConfig returns the value of Config.
func (s *ExecutionRequest) GetConfig() OptExecutionRequestConfig {
	return s.Config
}

// GetCode returns the value of Code.
func (s *ExecutionRequest) GetCode() string {
	return s.Code
}

// GetLanguage returns the value of Language.
func (s *ExecutionRequest) GetLanguage() string {
	return s.Language
}

// GetMaxRetries returns the value of MaxRetries.
func (s *ExecutionRequest) GetMaxRetries() OptInt {
	return s.MaxRetries
}

// GetTimeout returns the value of Timeout.
func (s *ExecutionRequest) GetTimeout() OptInt32 {
	return s.Timeout
}

// GetPriority returns the value of Priority.
func (s *ExecutionRequest) GetPriority() OptInt {
	return s.Priority
}

// SetEnvironment sets the value of Environment.
func (s *ExecutionRequest) SetEnvironment(val OptExecutionRequestEnvironment) {
	s.Environment = val
}

// SetConfig sets the value of Config.
func (s *ExecutionRequest) SetConfig(val OptExecutionRequestConfig) {
	s.Config = val
}

// SetCode sets the value of Code.
func (s *ExecutionRequest) SetCode(val string) {
	s.Code = val
}

// SetLanguage sets the value of Language.
func (s *ExecutionRequest) SetLanguage(val string) {
	s.Language = val
}

// SetMaxRetries sets the value of MaxRetries.
func (s *ExecutionRequest) SetMaxRetries(val OptInt) {
	s.MaxRetries = val
}

// SetTimeout sets the value of Timeout.
func (s *ExecutionRequest) SetTimeout(val OptInt32) {
	s.Timeout = val
}

// SetPriority sets the value of Priority.
func (s *ExecutionRequest) SetPriority(val OptInt) {
	s.Priority = val
}

// ExecutionRequestConfig represents sum type.
type ExecutionRequestConfig struct {
	Type                  ExecutionRequestConfigType // switch on this field
	DockerExecutionConfig DockerExecutionConfig
	PodmanExecutionConfig PodmanExecutionConfig
}

// ExecutionRequestConfigType is oneOf type of ExecutionRequestConfig.
type ExecutionRequestConfigType string

// Possible values for ExecutionRequestConfigType.
const (
	DockerExecutionConfigExecutionRequestConfig ExecutionRequestConfigType = "DockerExecutionConfig"
	PodmanExecutionConfigExecutionRequestConfig ExecutionRequestConfigType = "PodmanExecutionConfig"
)

// IsDockerExecutionConfig reports whether ExecutionRequestConfig is DockerExecutionConfig.
func (s ExecutionRequestConfig) IsDockerExecutionConfig() bool {
	return s.Type == DockerExecutionConfigExecutionRequestConfig
}

// IsPodmanExecutionConfig reports whether ExecutionRequestConfig is PodmanExecutionConfig.
func (s ExecutionRequestConfig) IsPodmanExecutionConfig() bool {
	return s.Type == PodmanExecutionConfigExecutionRequestConfig
}

// SetDockerExecutionConfig sets ExecutionRequestConfig to DockerExecutionConfig.
func (s *ExecutionRequestConfig) SetDockerExecutionConfig(v DockerExecutionConfig) {
	s.Type = DockerExecutionConfigExecutionRequestConfig
	s.DockerExecutionConfig = v
}

// GetDockerExecutionConfig returns DockerExecutionConfig and true boolean if ExecutionRequestConfig is DockerExecutionConfig.
func (s ExecutionRequestConfig) GetDockerExecutionConfig() (v DockerExecutionConfig, ok bool) {
	if !s.IsDockerExecutionConfig() {
		return v, false
	}
	return s.DockerExecutionConfig, true
}

// NewDockerExecutionConfigExecutionRequestConfig returns new ExecutionRequestConfig from DockerExecutionConfig.
func NewDockerExecutionConfigExecutionRequestConfig(v DockerExecutionConfig) ExecutionRequestConfig {
	var s ExecutionRequestConfig
	s.SetDockerExecutionConfig(v)
	return s
}

// SetPodmanExecutionConfig sets ExecutionRequestConfig to PodmanExecutionConfig.
func (s *ExecutionRequestConfig) SetPodmanExecutionConfig(v PodmanExecutionConfig) {
	s.Type = PodmanExecutionConfigExecutionRequestConfig
	s.PodmanExecutionConfig = v
}

// GetPodmanExecutionConfig returns PodmanExecutionConfig and true boolean if ExecutionRequestConfig is PodmanExecutionConfig.
func (s ExecutionRequestConfig) GetPodmanExecutionConfig() (v PodmanExecutionConfig, ok bool) {
	if !s.IsPodmanExecutionConfig() {
		return v, false
	}
	return s.PodmanExecutionConfig, true
}

// NewPodmanExecutionConfigExecutionRequestConfig returns new ExecutionRequestConfig from PodmanExecutionConfig.
func NewPodmanExecutionConfigExecutionRequestConfig(v PodmanExecutionConfig) ExecutionRequestConfig {
	var s ExecutionRequestConfig
	s.SetPodmanExecutionConfig(v)
	return s
}

// ExecutionRequestEnvironment represents sum type.
type ExecutionRequestEnvironment struct {
	Type                     ExecutionRequestEnvironmentType // switch on this field
	Flake                    Flake
	ExecutionEnvironmentSpec ExecutionEnvironmentSpec
}

// ExecutionRequestEnvironmentType is oneOf type of ExecutionRequestEnvironment.
type ExecutionRequestEnvironmentType string

// Possible values for ExecutionRequestEnvironmentType.
const (
	FlakeExecutionRequestEnvironment                    ExecutionRequestEnvironmentType = "Flake"
	ExecutionEnvironmentSpecExecutionRequestEnvironment ExecutionRequestEnvironmentType = "ExecutionEnvironmentSpec"
)

// IsFlake reports whether ExecutionRequestEnvironment is Flake.
func (s ExecutionRequestEnvironment) IsFlake() bool {
	return s.Type == FlakeExecutionRequestEnvironment
}

// IsExecutionEnvironmentSpec reports whether ExecutionRequestEnvironment is ExecutionEnvironmentSpec.
func (s ExecutionRequestEnvironment) IsExecutionEnvironmentSpec() bool {
	return s.Type == ExecutionEnvironmentSpecExecutionRequestEnvironment
}

// SetFlake sets ExecutionRequestEnvironment to Flake.
func (s *ExecutionRequestEnvironment) SetFlake(v Flake) {
	s.Type = FlakeExecutionRequestEnvironment
	s.Flake = v
}

// GetFlake returns Flake and true boolean if ExecutionRequestEnvironment is Flake.
func (s ExecutionRequestEnvironment) GetFlake() (v Flake, ok bool) {
	if !s.IsFlake() {
		return v, false
	}
	return s.Flake, true
}

// NewFlakeExecutionRequestEnvironment returns new ExecutionRequestEnvironment from Flake.
func NewFlakeExecutionRequestEnvironment(v Flake) ExecutionRequestEnvironment {
	var s ExecutionRequestEnvironment
	s.SetFlake(v)
	return s
}

// SetExecutionEnvironmentSpec sets ExecutionRequestEnvironment to ExecutionEnvironmentSpec.
func (s *ExecutionRequestEnvironment) SetExecutionEnvironmentSpec(v ExecutionEnvironmentSpec) {
	s.Type = ExecutionEnvironmentSpecExecutionRequestEnvironment
	s.ExecutionEnvironmentSpec = v
}

// GetExecutionEnvironmentSpec returns ExecutionEnvironmentSpec and true boolean if ExecutionRequestEnvironment is ExecutionEnvironmentSpec.
func (s ExecutionRequestEnvironment) GetExecutionEnvironmentSpec() (v ExecutionEnvironmentSpec, ok bool) {
	if !s.IsExecutionEnvironmentSpec() {
		return v, false
	}
	return s.ExecutionEnvironmentSpec, true
}

// NewExecutionEnvironmentSpecExecutionRequestEnvironment returns new ExecutionRequestEnvironment from ExecutionEnvironmentSpec.
func NewExecutionEnvironmentSpecExecutionRequestEnvironment(v ExecutionEnvironmentSpec) ExecutionRequestEnvironment {
	var s ExecutionRequestEnvironment
	s.SetExecutionEnvironmentSpec(v)
	return s
}

// Merged schema.
// Ref: #/components/schemas/ExecutionResult
type ExecutionResult struct {
	JobId int64 `json:"jobId"`
	// Merged property.
	Script string `json:"script"`
	// Merged property.
	Flake     string    `json:"flake"`
	CreatedAt time.Time `json:"created_at"`
	// Merged property.
	StartedAt  time.Time   `json:"started_at"`
	UpdatedAt  OptDateTime `json:"updated_at"`
	ExecId     int64       `json:"execId"`
	Args       string      `json:"args"`
	FinishedAt time.Time   `json:"finished_at"`
	ExecLogs   string      `json:"exec_logs"`
	NixLogs    OptString   `json:"nix_logs"`
}

// GetJobId returns the value of JobId.
func (s *ExecutionResult) GetJobId() int64 {
	return s.JobId
}

// GetScript returns the value of Script.
func (s *ExecutionResult) GetScript() string {
	return s.Script
}

// GetFlake returns the value of Flake.
func (s *ExecutionResult) GetFlake() string {
	return s.Flake
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ExecutionResult) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetStartedAt returns the value of StartedAt.
func (s *ExecutionResult) GetStartedAt() time.Time {
	return s.StartedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ExecutionResult) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetExecId returns the value of ExecId.
func (s *ExecutionResult) GetExecId() int64 {
	return s.ExecId
}

// GetArgs returns the value of Args.
func (s *ExecutionResult) GetArgs() string {
	return s.Args
}

// GetFinishedAt returns the value of FinishedAt.
func (s *ExecutionResult) GetFinishedAt() time.Time {
	return s.FinishedAt
}

// GetExecLogs returns the value of ExecLogs.
func (s *ExecutionResult) GetExecLogs() string {
	return s.ExecLogs
}

// GetNixLogs returns the value of NixLogs.
func (s *ExecutionResult) GetNixLogs() OptString {
	return s.NixLogs
}

// SetJobId sets the value of JobId.
func (s *ExecutionResult) SetJobId(val int64) {
	s.JobId = val
}

// SetScript sets the value of Script.
func (s *ExecutionResult) SetScript(val string) {
	s.Script = val
}

// SetFlake sets the value of Flake.
func (s *ExecutionResult) SetFlake(val string) {
	s.Flake = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ExecutionResult) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetStartedAt sets the value of StartedAt.
func (s *ExecutionResult) SetStartedAt(val time.Time) {
	s.StartedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ExecutionResult) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetExecId sets the value of ExecId.
func (s *ExecutionResult) SetExecId(val int64) {
	s.ExecId = val
}

// SetArgs sets the value of Args.
func (s *ExecutionResult) SetArgs(val string) {
	s.Args = val
}

// SetFinishedAt sets the value of FinishedAt.
func (s *ExecutionResult) SetFinishedAt(val time.Time) {
	s.FinishedAt = val
}

// SetExecLogs sets the value of ExecLogs.
func (s *ExecutionResult) SetExecLogs(val string) {
	s.ExecLogs = val
}

// SetNixLogs sets the value of NixLogs.
func (s *ExecutionResult) SetNixLogs(val OptString) {
	s.NixLogs = val
}

func (*ExecutionResult) getExecutionResultByIdRes() {}

// Ref: #/components/schemas/ExecutionWorker
type ExecutionWorker struct {
	ID        int32       `json:"id"`
	Name      string      `json:"name"`
	CreatedAt time.Time   `json:"created_at"`
	Status    string      `json:"status"`
	UpdatedAt OptDateTime `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *ExecutionWorker) GetID() int32 {
	return s.ID
}

// GetName returns the value of Name.
func (s *ExecutionWorker) GetName() string {
	return s.Name
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ExecutionWorker) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetStatus returns the value of Status.
func (s *ExecutionWorker) GetStatus() string {
	return s.Status
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ExecutionWorker) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *ExecutionWorker) SetID(val int32) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ExecutionWorker) SetName(val string) {
	s.Name = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ExecutionWorker) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetStatus sets the value of Status.
func (s *ExecutionWorker) SetStatus(val string) {
	s.Status = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ExecutionWorker) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

type Flake string

type GenerateUserTokenBadRequest Error

func (*GenerateUserTokenBadRequest) generateUserTokenRes() {}

type GenerateUserTokenForbidden Error

func (*GenerateUserTokenForbidden) generateUserTokenRes() {}

type GenerateUserTokenInternalServerError Error

func (*GenerateUserTokenInternalServerError) generateUserTokenRes() {}

type GenerateUserTokenOK struct {
	Token string `json:"token"`
}

// GetToken returns the value of Token.
func (s *GenerateUserTokenOK) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *GenerateUserTokenOK) SetToken(val string) {
	s.Token = val
}

func (*GenerateUserTokenOK) generateUserTokenRes() {}

type GetAllExecutionJobsBadRequest Error

func (*GetAllExecutionJobsBadRequest) getAllExecutionJobsRes() {}

type GetAllExecutionJobsInternalServerError Error

func (*GetAllExecutionJobsInternalServerError) getAllExecutionJobsRes() {}

type GetAllExecutionJobsOK struct {
	Jobs       []Job              `json:"jobs"`
	Pagination PaginationResponse `json:"pagination"`
}

// GetJobs returns the value of Jobs.
func (s *GetAllExecutionJobsOK) GetJobs() []Job {
	return s.Jobs
}

// GetPagination returns the value of Pagination.
func (s *GetAllExecutionJobsOK) GetPagination() PaginationResponse {
	return s.Pagination
}

// SetJobs sets the value of Jobs.
func (s *GetAllExecutionJobsOK) SetJobs(val []Job) {
	s.Jobs = val
}

// SetPagination sets the value of Pagination.
func (s *GetAllExecutionJobsOK) SetPagination(val PaginationResponse) {
	s.Pagination = val
}

func (*GetAllExecutionJobsOK) getAllExecutionJobsRes() {}

type GetAllExecutionsBadRequest Error

func (*GetAllExecutionsBadRequest) getAllExecutionsRes() {}

type GetAllExecutionsInternalServerError Error

func (*GetAllExecutionsInternalServerError) getAllExecutionsRes() {}

type GetAllExecutionsOK struct {
	Executions []ExecutionResult  `json:"executions"`
	Pagination PaginationResponse `json:"pagination"`
}

// GetExecutions returns the value of Executions.
func (s *GetAllExecutionsOK) GetExecutions() []ExecutionResult {
	return s.Executions
}

// GetPagination returns the value of Pagination.
func (s *GetAllExecutionsOK) GetPagination() PaginationResponse {
	return s.Pagination
}

// SetExecutions sets the value of Executions.
func (s *GetAllExecutionsOK) SetExecutions(val []ExecutionResult) {
	s.Executions = val
}

// SetPagination sets the value of Pagination.
func (s *GetAllExecutionsOK) SetPagination(val PaginationResponse) {
	s.Pagination = val
}

func (*GetAllExecutionsOK) getAllExecutionsRes() {}

// GetExecutionConfigForbidden is response for GetExecutionConfig operation.
type GetExecutionConfigForbidden struct{}

func (*GetExecutionConfigForbidden) getExecutionConfigRes() {}

type GetExecutionJobByIdBadRequest Error

func (*GetExecutionJobByIdBadRequest) getExecutionJobByIdRes() {}

type GetExecutionJobByIdInternalServerError Error

func (*GetExecutionJobByIdInternalServerError) getExecutionJobByIdRes() {}

// GetExecutionJobByIdNotFound is response for GetExecutionJobById operation.
type GetExecutionJobByIdNotFound struct{}

func (*GetExecutionJobByIdNotFound) getExecutionJobByIdRes() {}

type GetExecutionResultByIdBadRequest Error

func (*GetExecutionResultByIdBadRequest) getExecutionResultByIdRes() {}

type GetExecutionResultByIdInternalServerError Error

func (*GetExecutionResultByIdInternalServerError) getExecutionResultByIdRes() {}

// GetExecutionResultByIdNotFound is response for GetExecutionResultById operation.
type GetExecutionResultByIdNotFound struct{}

func (*GetExecutionResultByIdNotFound) getExecutionResultByIdRes() {}

type GetExecutionWorkersBadRequest Error

func (*GetExecutionWorkersBadRequest) getExecutionWorkersRes() {}

type GetExecutionWorkersInternalServerError Error

func (*GetExecutionWorkersInternalServerError) getExecutionWorkersRes() {}

type GetExecutionWorkersOK struct {
	Workers    []ExecutionWorker  `json:"workers"`
	Pagination PaginationResponse `json:"pagination"`
}

// GetWorkers returns the value of Workers.
func (s *GetExecutionWorkersOK) GetWorkers() []ExecutionWorker {
	return s.Workers
}

// GetPagination returns the value of Pagination.
func (s *GetExecutionWorkersOK) GetPagination() PaginationResponse {
	return s.Pagination
}

// SetWorkers sets the value of Workers.
func (s *GetExecutionWorkersOK) SetWorkers(val []ExecutionWorker) {
	s.Workers = val
}

// SetPagination sets the value of Pagination.
func (s *GetExecutionWorkersOK) SetPagination(val PaginationResponse) {
	s.Pagination = val
}

func (*GetExecutionWorkersOK) getExecutionWorkersRes() {}

type GetExecutionsForJobBadRequest Error

func (*GetExecutionsForJobBadRequest) getExecutionsForJobRes() {}

type GetExecutionsForJobInternalServerError Error

func (*GetExecutionsForJobInternalServerError) getExecutionsForJobRes() {}

// GetExecutionsForJobNotFound is response for GetExecutionsForJob operation.
type GetExecutionsForJobNotFound struct{}

func (*GetExecutionsForJobNotFound) getExecutionsForJobRes() {}

type GetExecutionsForJobOK struct {
	Executions []ExecutionResult  `json:"executions"`
	Pagination PaginationResponse `json:"pagination"`
}

// GetExecutions returns the value of Executions.
func (s *GetExecutionsForJobOK) GetExecutions() []ExecutionResult {
	return s.Executions
}

// GetPagination returns the value of Pagination.
func (s *GetExecutionsForJobOK) GetPagination() PaginationResponse {
	return s.Pagination
}

// SetExecutions sets the value of Executions.
func (s *GetExecutionsForJobOK) SetExecutions(val []ExecutionResult) {
	s.Executions = val
}

// SetPagination sets the value of Pagination.
func (s *GetExecutionsForJobOK) SetPagination(val PaginationResponse) {
	s.Pagination = val
}

func (*GetExecutionsForJobOK) getExecutionsForJobRes() {}

type GetTokenForbidden Error

func (*GetTokenForbidden) getTokenRes() {}

type GetTokenInternalServerError Error

func (*GetTokenInternalServerError) getTokenRes() {}

type GetTokenOK struct {
	Token string `json:"token"`
}

// GetToken returns the value of Token.
func (s *GetTokenOK) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *GetTokenOK) SetToken(val string) {
	s.Token = val
}

func (*GetTokenOK) getTokenRes() {}

type GetTokenReq struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// GetUsername returns the value of Username.
func (s *GetTokenReq) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *GetTokenReq) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *GetTokenReq) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *GetTokenReq) SetPassword(val string) {
	s.Password = val
}

type GetTokenUnauthorized Error

func (*GetTokenUnauthorized) getTokenRes() {}

type GetVersionOK struct {
	Version string `json:"version"`
}

// GetVersion returns the value of Version.
func (s *GetVersionOK) GetVersion() string {
	return s.Version
}

// SetVersion sets the value of Version.
func (s *GetVersionOK) SetVersion(val string) {
	s.Version = val
}

func (*GetVersionOK) getVersionRes() {}

// Ref: #/components/schemas/Job
type Job struct {
	JobId     int64       `json:"jobId"`
	Script    string      `json:"script"`
	Flake     string      `json:"flake"`
	CreatedAt time.Time   `json:"created_at"`
	StartedAt OptDateTime `json:"started_at"`
	UpdatedAt OptDateTime `json:"updated_at"`
}

// GetJobId returns the value of JobId.
func (s *Job) GetJobId() int64 {
	return s.JobId
}

// GetScript returns the value of Script.
func (s *Job) GetScript() string {
	return s.Script
}

// GetFlake returns the value of Flake.
func (s *Job) GetFlake() string {
	return s.Flake
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Job) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetStartedAt returns the value of StartedAt.
func (s *Job) GetStartedAt() OptDateTime {
	return s.StartedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Job) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetJobId sets the value of JobId.
func (s *Job) SetJobId(val int64) {
	s.JobId = val
}

// SetScript sets the value of Script.
func (s *Job) SetScript(val string) {
	s.Script = val
}

// SetFlake sets the value of Flake.
func (s *Job) SetFlake(val string) {
	s.Flake = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Job) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetStartedAt sets the value of StartedAt.
func (s *Job) SetStartedAt(val OptDateTime) {
	s.StartedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Job) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

func (*Job) getExecutionJobByIdRes() {}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDockerExecutionConfigContainerConfig returns new OptDockerExecutionConfigContainerConfig with value set to v.
func NewOptDockerExecutionConfigContainerConfig(v DockerExecutionConfigContainerConfig) OptDockerExecutionConfigContainerConfig {
	return OptDockerExecutionConfigContainerConfig{
		Value: v,
		Set:   true,
	}
}

// OptDockerExecutionConfigContainerConfig is optional DockerExecutionConfigContainerConfig.
type OptDockerExecutionConfigContainerConfig struct {
	Value DockerExecutionConfigContainerConfig
	Set   bool
}

// IsSet returns true if OptDockerExecutionConfigContainerConfig was set.
func (o OptDockerExecutionConfigContainerConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDockerExecutionConfigContainerConfig) Reset() {
	var v DockerExecutionConfigContainerConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDockerExecutionConfigContainerConfig) SetTo(v DockerExecutionConfigContainerConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDockerExecutionConfigContainerConfig) Get() (v DockerExecutionConfigContainerConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDockerExecutionConfigContainerConfig) Or(d DockerExecutionConfigContainerConfig) DockerExecutionConfigContainerConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDockerExecutionConfigHostConfig returns new OptDockerExecutionConfigHostConfig with value set to v.
func NewOptDockerExecutionConfigHostConfig(v DockerExecutionConfigHostConfig) OptDockerExecutionConfigHostConfig {
	return OptDockerExecutionConfigHostConfig{
		Value: v,
		Set:   true,
	}
}

// OptDockerExecutionConfigHostConfig is optional DockerExecutionConfigHostConfig.
type OptDockerExecutionConfigHostConfig struct {
	Value DockerExecutionConfigHostConfig
	Set   bool
}

// IsSet returns true if OptDockerExecutionConfigHostConfig was set.
func (o OptDockerExecutionConfigHostConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDockerExecutionConfigHostConfig) Reset() {
	var v DockerExecutionConfigHostConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDockerExecutionConfigHostConfig) SetTo(v DockerExecutionConfigHostConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDockerExecutionConfigHostConfig) Get() (v DockerExecutionConfigHostConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDockerExecutionConfigHostConfig) Or(d DockerExecutionConfigHostConfig) DockerExecutionConfigHostConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDockerExecutionConfigHostConfigResources returns new OptDockerExecutionConfigHostConfigResources with value set to v.
func NewOptDockerExecutionConfigHostConfigResources(v DockerExecutionConfigHostConfigResources) OptDockerExecutionConfigHostConfigResources {
	return OptDockerExecutionConfigHostConfigResources{
		Value: v,
		Set:   true,
	}
}

// OptDockerExecutionConfigHostConfigResources is optional DockerExecutionConfigHostConfigResources.
type OptDockerExecutionConfigHostConfigResources struct {
	Value DockerExecutionConfigHostConfigResources
	Set   bool
}

// IsSet returns true if OptDockerExecutionConfigHostConfigResources was set.
func (o OptDockerExecutionConfigHostConfigResources) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDockerExecutionConfigHostConfigResources) Reset() {
	var v DockerExecutionConfigHostConfigResources
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDockerExecutionConfigHostConfigResources) SetTo(v DockerExecutionConfigHostConfigResources) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDockerExecutionConfigHostConfigResources) Get() (v DockerExecutionConfigHostConfigResources, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDockerExecutionConfigHostConfigResources) Or(d DockerExecutionConfigHostConfigResources) DockerExecutionConfigHostConfigResources {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutionRequestConfig returns new OptExecutionRequestConfig with value set to v.
func NewOptExecutionRequestConfig(v ExecutionRequestConfig) OptExecutionRequestConfig {
	return OptExecutionRequestConfig{
		Value: v,
		Set:   true,
	}
}

// OptExecutionRequestConfig is optional ExecutionRequestConfig.
type OptExecutionRequestConfig struct {
	Value ExecutionRequestConfig
	Set   bool
}

// IsSet returns true if OptExecutionRequestConfig was set.
func (o OptExecutionRequestConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutionRequestConfig) Reset() {
	var v ExecutionRequestConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutionRequestConfig) SetTo(v ExecutionRequestConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutionRequestConfig) Get() (v ExecutionRequestConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutionRequestConfig) Or(d ExecutionRequestConfig) ExecutionRequestConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutionRequestEnvironment returns new OptExecutionRequestEnvironment with value set to v.
func NewOptExecutionRequestEnvironment(v ExecutionRequestEnvironment) OptExecutionRequestEnvironment {
	return OptExecutionRequestEnvironment{
		Value: v,
		Set:   true,
	}
}

// OptExecutionRequestEnvironment is optional ExecutionRequestEnvironment.
type OptExecutionRequestEnvironment struct {
	Value ExecutionRequestEnvironment
	Set   bool
}

// IsSet returns true if OptExecutionRequestEnvironment was set.
func (o OptExecutionRequestEnvironment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutionRequestEnvironment) Reset() {
	var v ExecutionRequestEnvironment
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutionRequestEnvironment) SetTo(v ExecutionRequestEnvironment) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutionRequestEnvironment) Get() (v ExecutionRequestEnvironment, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutionRequestEnvironment) Or(d ExecutionRequestEnvironment) ExecutionRequestEnvironment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPodmanExecutionConfigContainerBasicConfig returns new OptPodmanExecutionConfigContainerBasicConfig with value set to v.
func NewOptPodmanExecutionConfigContainerBasicConfig(v PodmanExecutionConfigContainerBasicConfig) OptPodmanExecutionConfigContainerBasicConfig {
	return OptPodmanExecutionConfigContainerBasicConfig{
		Value: v,
		Set:   true,
	}
}

// OptPodmanExecutionConfigContainerBasicConfig is optional PodmanExecutionConfigContainerBasicConfig.
type OptPodmanExecutionConfigContainerBasicConfig struct {
	Value PodmanExecutionConfigContainerBasicConfig
	Set   bool
}

// IsSet returns true if OptPodmanExecutionConfigContainerBasicConfig was set.
func (o OptPodmanExecutionConfigContainerBasicConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPodmanExecutionConfigContainerBasicConfig) Reset() {
	var v PodmanExecutionConfigContainerBasicConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPodmanExecutionConfigContainerBasicConfig) SetTo(v PodmanExecutionConfigContainerBasicConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPodmanExecutionConfigContainerBasicConfig) Get() (v PodmanExecutionConfigContainerBasicConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPodmanExecutionConfigContainerBasicConfig) Or(d PodmanExecutionConfigContainerBasicConfig) PodmanExecutionConfigContainerBasicConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPodmanExecutionConfigContainerStorageConfig returns new OptPodmanExecutionConfigContainerStorageConfig with value set to v.
func NewOptPodmanExecutionConfigContainerStorageConfig(v PodmanExecutionConfigContainerStorageConfig) OptPodmanExecutionConfigContainerStorageConfig {
	return OptPodmanExecutionConfigContainerStorageConfig{
		Value: v,
		Set:   true,
	}
}

// OptPodmanExecutionConfigContainerStorageConfig is optional PodmanExecutionConfigContainerStorageConfig.
type OptPodmanExecutionConfigContainerStorageConfig struct {
	Value PodmanExecutionConfigContainerStorageConfig
	Set   bool
}

// IsSet returns true if OptPodmanExecutionConfigContainerStorageConfig was set.
func (o OptPodmanExecutionConfigContainerStorageConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPodmanExecutionConfigContainerStorageConfig) Reset() {
	var v PodmanExecutionConfigContainerStorageConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPodmanExecutionConfigContainerStorageConfig) SetTo(v PodmanExecutionConfigContainerStorageConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPodmanExecutionConfigContainerStorageConfig) Get() (v PodmanExecutionConfigContainerStorageConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPodmanExecutionConfigContainerStorageConfig) Or(d PodmanExecutionConfigContainerStorageConfig) PodmanExecutionConfigContainerStorageConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Package
type Package struct {
	PackageName     OptString `json:"package_name"`
	PackageVersion  OptString `json:"package_version"`
	PackageType     OptString `json:"package_type"`
	PackageLanguage OptString `json:"package_language"`
}

// GetPackageName returns the value of PackageName.
func (s *Package) GetPackageName() OptString {
	return s.PackageName
}

// GetPackageVersion returns the value of PackageVersion.
func (s *Package) GetPackageVersion() OptString {
	return s.PackageVersion
}

// GetPackageType returns the value of PackageType.
func (s *Package) GetPackageType() OptString {
	return s.PackageType
}

// GetPackageLanguage returns the value of PackageLanguage.
func (s *Package) GetPackageLanguage() OptString {
	return s.PackageLanguage
}

// SetPackageName sets the value of PackageName.
func (s *Package) SetPackageName(val OptString) {
	s.PackageName = val
}

// SetPackageVersion sets the value of PackageVersion.
func (s *Package) SetPackageVersion(val OptString) {
	s.PackageVersion = val
}

// SetPackageType sets the value of PackageType.
func (s *Package) SetPackageType(val OptString) {
	s.PackageType = val
}

// SetPackageLanguage sets the value of PackageLanguage.
func (s *Package) SetPackageLanguage(val OptString) {
	s.PackageLanguage = val
}

func (*Package) searchPackagesRes() {}

// Ref: #/components/schemas/PaginationResponse
type PaginationResponse struct {
	// Represents the total number of items.
	Total int64 `json:"total"`
	// Represents the total number of pages.
	Pages OptInt32 `json:"pages"`
	// Represents the current page.
	Page OptInt32 `json:"page"`
	// Represents the number of items per page.
	Limit int32     `json:"limit"`
	Next  OptString `json:"next"`
}

// GetTotal returns the value of Total.
func (s *PaginationResponse) GetTotal() int64 {
	return s.Total
}

// GetPages returns the value of Pages.
func (s *PaginationResponse) GetPages() OptInt32 {
	return s.Pages
}

// GetPage returns the value of Page.
func (s *PaginationResponse) GetPage() OptInt32 {
	return s.Page
}

// GetLimit returns the value of Limit.
func (s *PaginationResponse) GetLimit() int32 {
	return s.Limit
}

// GetNext returns the value of Next.
func (s *PaginationResponse) GetNext() OptString {
	return s.Next
}

// SetTotal sets the value of Total.
func (s *PaginationResponse) SetTotal(val int64) {
	s.Total = val
}

// SetPages sets the value of Pages.
func (s *PaginationResponse) SetPages(val OptInt32) {
	s.Pages = val
}

// SetPage sets the value of Page.
func (s *PaginationResponse) SetPage(val OptInt32) {
	s.Page = val
}

// SetLimit sets the value of Limit.
func (s *PaginationResponse) SetLimit(val int32) {
	s.Limit = val
}

// SetNext sets the value of Next.
func (s *PaginationResponse) SetNext(val OptString) {
	s.Next = val
}

// Ref: #/components/schemas/PodmanExecutionConfig
type PodmanExecutionConfig struct {
	ContainerBasicConfig   OptPodmanExecutionConfigContainerBasicConfig   `json:"ContainerBasicConfig"`
	ContainerStorageConfig OptPodmanExecutionConfigContainerStorageConfig `json:"ContainerStorageConfig"`
}

// GetContainerBasicConfig returns the value of ContainerBasicConfig.
func (s *PodmanExecutionConfig) GetContainerBasicConfig() OptPodmanExecutionConfigContainerBasicConfig {
	return s.ContainerBasicConfig
}

// GetContainerStorageConfig returns the value of ContainerStorageConfig.
func (s *PodmanExecutionConfig) GetContainerStorageConfig() OptPodmanExecutionConfigContainerStorageConfig {
	return s.ContainerStorageConfig
}

// SetContainerBasicConfig sets the value of ContainerBasicConfig.
func (s *PodmanExecutionConfig) SetContainerBasicConfig(val OptPodmanExecutionConfigContainerBasicConfig) {
	s.ContainerBasicConfig = val
}

// SetContainerStorageConfig sets the value of ContainerStorageConfig.
func (s *PodmanExecutionConfig) SetContainerStorageConfig(val OptPodmanExecutionConfigContainerStorageConfig) {
	s.ContainerStorageConfig = val
}

type PodmanExecutionConfigContainerBasicConfig struct {
	OCIRuntime OptString `json:"OCIRuntime"`
}

// GetOCIRuntime returns the value of OCIRuntime.
func (s *PodmanExecutionConfigContainerBasicConfig) GetOCIRuntime() OptString {
	return s.OCIRuntime
}

// SetOCIRuntime sets the value of OCIRuntime.
func (s *PodmanExecutionConfigContainerBasicConfig) SetOCIRuntime(val OptString) {
	s.OCIRuntime = val
}

type PodmanExecutionConfigContainerStorageConfig struct {
	Image        OptString `json:"Image"`
	ImageOS      OptString `json:"ImageOS"`
	ImageArch    OptString `json:"ImageArch"`
	ImageVariant OptString `json:"ImageVariant"`
}

// GetImage returns the value of Image.
func (s *PodmanExecutionConfigContainerStorageConfig) GetImage() OptString {
	return s.Image
}

// GetImageOS returns the value of ImageOS.
func (s *PodmanExecutionConfigContainerStorageConfig) GetImageOS() OptString {
	return s.ImageOS
}

// GetImageArch returns the value of ImageArch.
func (s *PodmanExecutionConfigContainerStorageConfig) GetImageArch() OptString {
	return s.ImageArch
}

// GetImageVariant returns the value of ImageVariant.
func (s *PodmanExecutionConfigContainerStorageConfig) GetImageVariant() OptString {
	return s.ImageVariant
}

// SetImage sets the value of Image.
func (s *PodmanExecutionConfigContainerStorageConfig) SetImage(val OptString) {
	s.Image = val
}

// SetImageOS sets the value of ImageOS.
func (s *PodmanExecutionConfigContainerStorageConfig) SetImageOS(val OptString) {
	s.ImageOS = val
}

// SetImageArch sets the value of ImageArch.
func (s *PodmanExecutionConfigContainerStorageConfig) SetImageArch(val OptString) {
	s.ImageArch = val
}

// SetImageVariant sets the value of ImageVariant.
func (s *PodmanExecutionConfigContainerStorageConfig) SetImageVariant(val OptString) {
	s.ImageVariant = val
}
