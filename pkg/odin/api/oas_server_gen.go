// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CancelExecutionJob implements cancelExecutionJob operation.
	//
	// Cancel Execution Job.
	//
	// PUT /executions/jobs/{JobId}
	CancelExecutionJob(ctx context.Context, params CancelExecutionJobParams) (CancelExecutionJobRes, error)
	// DeleteExecutionJob implements deleteExecutionJob operation.
	//
	// Delete execution job.
	//
	// DELETE /executions/jobs/{JobId}
	DeleteExecutionJob(ctx context.Context, params DeleteExecutionJobParams) (DeleteExecutionJobRes, error)
	// Execute implements execute operation.
	//
	// Execute a script.
	//
	// POST /executions/execute
	Execute(ctx context.Context, req *ExecutionRequest, params ExecuteParams) (ExecuteRes, error)
	// GetAllExecutionJobs implements getAllExecutionJobs operation.
	//
	// Get all execution jobs.
	//
	// GET /jobs/execution
	GetAllExecutionJobs(ctx context.Context, params GetAllExecutionJobsParams) (GetAllExecutionJobsRes, error)
	// GetAllExecutions implements getAllExecutions operation.
	//
	// Get all executions.
	//
	// GET /executions
	GetAllExecutions(ctx context.Context, params GetAllExecutionsParams) (GetAllExecutionsRes, error)
	// GetAllLanguages implements getAllLanguages operation.
	//
	// Get all languages.
	//
	// GET /languages
	GetAllLanguages(ctx context.Context, params GetAllLanguagesParams) (GetAllLanguagesRes, error)
	// GetExecutionConfig implements getExecutionConfig operation.
	//
	// Get execution config.
	//
	// GET /execution/config
	GetExecutionConfig(ctx context.Context, params GetExecutionConfigParams) (GetExecutionConfigRes, error)
	// GetExecutionJobById implements getExecutionJobById operation.
	//
	// Get execution job.
	//
	// GET /executions/jobs/{JobId}
	GetExecutionJobById(ctx context.Context, params GetExecutionJobByIdParams) (GetExecutionJobByIdRes, error)
	// GetExecutionResultById implements getExecutionResultById operation.
	//
	// Get execution result by id.
	//
	// GET /executions/{execId}
	GetExecutionResultById(ctx context.Context, params GetExecutionResultByIdParams) (GetExecutionResultByIdRes, error)
	// GetExecutionsForJob implements getExecutionsForJob operation.
	//
	// Get executions of given job.
	//
	// GET /jobs/{JobId}/executions
	GetExecutionsForJob(ctx context.Context, params GetExecutionsForJobParams) (GetExecutionsForJobRes, error)
	// GetVersion implements getVersion operation.
	//
	// Get version.
	//
	// GET /version
	GetVersion(ctx context.Context, params GetVersionParams) (GetVersionRes, error)
	// PackagesExist implements PackagesExist operation.
	//
	// Verify the package list is available for the language version while switching between language
	// versions.
	//
	// POST /packages/exist/
	PackagesExist(ctx context.Context, req *PackageExistRequest, params PackagesExistParams) (PackagesExistRes, error)
	// SearchLanguagePackages implements SearchLanguagePackages operation.
	//
	// Search for language specific packages.
	//
	// GET /search/language
	SearchLanguagePackages(ctx context.Context, params SearchLanguagePackagesParams) (SearchLanguagePackagesRes, error)
	// SearchSystemPackages implements SearchSystemPackages operation.
	//
	// Search for system packages.
	//
	// GET /search/system
	SearchSystemPackages(ctx context.Context, params SearchSystemPackagesParams) (SearchSystemPackagesRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
