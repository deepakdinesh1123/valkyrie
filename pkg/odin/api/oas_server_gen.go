// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// DeleteExecution implements deleteExecution operation.
	//
	// Delete execution.
	//
	// DELETE /executions/{executionId}/
	DeleteExecution(ctx context.Context, params DeleteExecutionParams) (DeleteExecutionRes, error)
	// Execute implements execute operation.
	//
	// Execute a script.
	//
	// POST /executions/execute/
	Execute(ctx context.Context, req *ExecutionRequest) (ExecuteRes, error)
	// GetExecutionConfig implements getExecutionConfig operation.
	//
	// Get execution config.
	//
	// GET /execution/config/
	GetExecutionConfig(ctx context.Context) (GetExecutionConfigRes, error)
	// GetExecutionResult implements getExecutionResult operation.
	//
	// Get execution result.
	//
	// GET /executions/{executionId}/
	GetExecutionResult(ctx context.Context, params GetExecutionResultParams) (GetExecutionResultRes, error)
	// GetExecutionWorkers implements getExecutionWorkers operation.
	//
	// Get all execution workers.
	//
	// GET /executions/workers
	GetExecutionWorkers(ctx context.Context, params GetExecutionWorkersParams) (GetExecutionWorkersRes, error)
	// GetExecutions implements getExecutions operation.
	//
	// Get all executions.
	//
	// GET /executions/
	GetExecutions(ctx context.Context, params GetExecutionsParams) (GetExecutionsRes, error)
	// GetVersion implements getVersion operation.
	//
	// Get version.
	//
	// GET /version/
	GetVersion(ctx context.Context) (GetVersionRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
