// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// CancelExecutionJobParams is parameters of cancelExecutionJob operation.
type CancelExecutionJobParams struct {
	JobId int64
}

func unpackCancelExecutionJobParams(packed middleware.Parameters) (params CancelExecutionJobParams) {
	{
		key := middleware.ParameterKey{
			Name: "JobId",
			In:   "path",
		}
		params.JobId = packed[key].(int64)
	}
	return params
}

func decodeCancelExecutionJobParams(args [1]string, argsEscaped bool, r *http.Request) (params CancelExecutionJobParams, _ error) {
	// Decode path: JobId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "JobId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.JobId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "JobId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteExecutionJobParams is parameters of deleteExecutionJob operation.
type DeleteExecutionJobParams struct {
	JobId int64
}

func unpackDeleteExecutionJobParams(packed middleware.Parameters) (params DeleteExecutionJobParams) {
	{
		key := middleware.ParameterKey{
			Name: "JobId",
			In:   "path",
		}
		params.JobId = packed[key].(int64)
	}
	return params
}

func decodeDeleteExecutionJobParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteExecutionJobParams, _ error) {
	// Decode path: JobId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "JobId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.JobId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "JobId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteExecutionWorkerParams is parameters of deleteExecutionWorker operation.
type DeleteExecutionWorkerParams struct {
	WorkerId int64
	Force    OptBool
}

func unpackDeleteExecutionWorkerParams(packed middleware.Parameters) (params DeleteExecutionWorkerParams) {
	{
		key := middleware.ParameterKey{
			Name: "workerId",
			In:   "path",
		}
		params.WorkerId = packed[key].(int64)
	}
	{
		key := middleware.ParameterKey{
			Name: "force",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Force = v.(OptBool)
		}
	}
	return params
}

func decodeDeleteExecutionWorkerParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteExecutionWorkerParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: workerId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "workerId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.WorkerId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "workerId",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: force.
	{
		val := bool(false)
		params.Force.SetTo(val)
	}
	// Decode query: force.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "force",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotForceVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotForceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Force.SetTo(paramsDotForceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "force",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetAllExecutionJobsParams is parameters of getAllExecutionJobs operation.
type GetAllExecutionJobsParams struct {
	// The page number to retrieve.
	Page OptInt32
	// The number of items per page.
	PageSize OptInt32
}

func unpackGetAllExecutionJobsParams(packed middleware.Parameters) (params GetAllExecutionJobsParams) {
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pageSize",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageSize = v.(OptInt32)
		}
	}
	return params
}

func decodeGetAllExecutionJobsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetAllExecutionJobsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: page.
	{
		val := int32(0)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pageSize.
	{
		val := int32(20)
		params.PageSize.SetTo(val)
	}
	// Decode query: pageSize.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageSize",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageSizeVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageSize.SetTo(paramsDotPageSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageSize",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetAllExecutionsParams is parameters of getAllExecutions operation.
type GetAllExecutionsParams struct {
	// The page number to retrieve.
	Page OptInt32
	// The number of items per page.
	PageSize OptInt32
}

func unpackGetAllExecutionsParams(packed middleware.Parameters) (params GetAllExecutionsParams) {
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pageSize",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageSize = v.(OptInt32)
		}
	}
	return params
}

func decodeGetAllExecutionsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetAllExecutionsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: page.
	{
		val := int32(0)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pageSize.
	{
		val := int32(20)
		params.PageSize.SetTo(val)
	}
	// Decode query: pageSize.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageSize",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageSizeVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageSize.SetTo(paramsDotPageSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageSize",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetExecutionJobByIdParams is parameters of getExecutionJobById operation.
type GetExecutionJobByIdParams struct {
	JobId int64
}

func unpackGetExecutionJobByIdParams(packed middleware.Parameters) (params GetExecutionJobByIdParams) {
	{
		key := middleware.ParameterKey{
			Name: "JobId",
			In:   "path",
		}
		params.JobId = packed[key].(int64)
	}
	return params
}

func decodeGetExecutionJobByIdParams(args [1]string, argsEscaped bool, r *http.Request) (params GetExecutionJobByIdParams, _ error) {
	// Decode path: JobId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "JobId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.JobId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "JobId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetExecutionResultByIdParams is parameters of getExecutionResultById operation.
type GetExecutionResultByIdParams struct {
	ExecId int64
}

func unpackGetExecutionResultByIdParams(packed middleware.Parameters) (params GetExecutionResultByIdParams) {
	{
		key := middleware.ParameterKey{
			Name: "execId",
			In:   "path",
		}
		params.ExecId = packed[key].(int64)
	}
	return params
}

func decodeGetExecutionResultByIdParams(args [1]string, argsEscaped bool, r *http.Request) (params GetExecutionResultByIdParams, _ error) {
	// Decode path: execId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "execId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.ExecId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "execId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetExecutionWorkersParams is parameters of getExecutionWorkers operation.
type GetExecutionWorkersParams struct {
	// The page number to retrieve.
	Page OptInt32
	// The number of items per page.
	PageSize OptInt32
}

func unpackGetExecutionWorkersParams(packed middleware.Parameters) (params GetExecutionWorkersParams) {
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pageSize",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageSize = v.(OptInt32)
		}
	}
	return params
}

func decodeGetExecutionWorkersParams(args [0]string, argsEscaped bool, r *http.Request) (params GetExecutionWorkersParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: page.
	{
		val := int32(0)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pageSize.
	{
		val := int32(20)
		params.PageSize.SetTo(val)
	}
	// Decode query: pageSize.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageSize",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageSizeVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageSize.SetTo(paramsDotPageSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageSize",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetExecutionsForJobParams is parameters of getExecutionsForJob operation.
type GetExecutionsForJobParams struct {
	JobId int64
	// The page number to retrieve.
	Page OptInt32
	// The number of items per page.
	PageSize OptInt32
}

func unpackGetExecutionsForJobParams(packed middleware.Parameters) (params GetExecutionsForJobParams) {
	{
		key := middleware.ParameterKey{
			Name: "JobId",
			In:   "path",
		}
		params.JobId = packed[key].(int64)
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pageSize",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageSize = v.(OptInt32)
		}
	}
	return params
}

func decodeGetExecutionsForJobParams(args [1]string, argsEscaped bool, r *http.Request) (params GetExecutionsForJobParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: JobId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "JobId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.JobId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "JobId",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: page.
	{
		val := int32(0)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: pageSize.
	{
		val := int32(20)
		params.PageSize.SetTo(val)
	}
	// Decode query: pageSize.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageSize",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageSizeVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageSize.SetTo(paramsDotPageSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageSize",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
