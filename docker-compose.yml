services:

  tetragon:
    image: quay.io/cilium/tetragon:v1.4.0
    container_name: tetragon
    pid: "host"
    privileged: true
    volumes:
      - /sys/kernel/btf/vmlinux:/var/lib/tetragon/btf
    command:
      - --metrics-server=0.0.0.0:9091
    depends_on:
      - valkyrie-otel-collector
    profiles:
      - staging
      - production

  traefik-proxy:
    image: traefik:v3.3
    ports:
      - "80:80"
      - "8888:8080"
    volumes:
      - ./configs/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
    depends_on:
      docker-proxy:
        condition: service_healthy
    environment:
      - TRAEFIK_PROVIDERS_DOCKER=true
      - TRAEFIK_PROVIDERS_DOCKER_ENDPOINT=tcp://docker-proxy:2375
      - TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT=false
      - TRAEFIK_API_DASHBOARD=true
    networks:
      - valkyrie-network
    profiles:
      - dev
      - production
      - staging

  valkyrie:
    build:
      context: .
      dockerfile: builds/images/packages/valkyrie.dockerfile
    # image: valkyrie:0.0.1
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      valkyrie-store:
        condition: service_started
      traefik-proxy:
        condition: service_started
    command: ["server", "start"]
    ports:
      - 8080
    labels:
      traefik.http.routers.valkyrie.rule: "Host(`valkyrie.localhost`)"
      traefik.enable: "true"
    environment:
      - POSTGRES_HOST=postgres
    # runtime: "runsc"
    networks:
      - valkyrie-network
    profiles:
      - dev
      - production
      - staging

  valkyrie-worker:
    build:
      context: .
      dockerfile: builds/images/packages/valkyrie.dockerfile
    # image: valkyrie:0.0.1
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      valkyrie:
        condition: service_started
      valkyrie-store:
        condition: service_started
      traefik-proxy:
        condition: service_started
    deploy:
      replicas: 1
    command: ["worker", "start"]
    environment:
      - DOCKER_HOST=tcp://docker-proxy:2375
      - POSTGRES_HOST=postgres
    networks:
      - valkyrie-network
    # runtime: "runsc"
    profiles:
      - dev
      - production
      - staging
  
  docker-proxy:
    image: tecnativa/docker-socket-proxy
    environment:
      - ALLOW_START=1
      - ALLOW_STOP=1
      - EXEC=1
      - CONTAINERS=1
      - POST=1
    user: 'root'
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    healthcheck:
      test: wget --spider http://localhost:2375/version || exit 1
      interval: "29s"
      timeout: "5s"
      retries: 3
      start_period: "21s"
    networks:
      - valkyrie-network
    profiles:
      - dev
      - production
      - staging
  
  valkyrie-store-builder:
    build:
      context: .
      dockerfile: builds/images/store/build.dockerfile
    volumes:
      - type: bind
        source: $HOME/.valkyrie/store/nix
        target: /nix
      - type: bind
        source: $HOME/.valkyrie/store/setup
        target: /tmp/setup
    profiles:
      - setup
  
  valkyrie-store:
    build:
      context: .
      dockerfile: builds/images/store/store.dockerfile
    ports:
      - 5000
    labels:
      traefik.http.routers.valkyrie-store.rule: "Host(`valkyrie-store.localhost`)"
      traefik.enable: "true"
    healthcheck:
      test: ["CMD-SHELL", '[ "$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000)" = "404" ] && exit 0 || exit 1'] 
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    # runtime: "runsc"
    networks:
      - valkyrie-network
    env_file:
      - $HOME/.valkyrie/store/setup/.env
    depends_on:
      traefik-proxy:
        condition: service_started
    volumes:
      - type: bind
        source: $HOME/.valkyrie/store/nix
        target: /nix
      - type: bind
        source: $HOME/.valkyrie/store/setup
        target: /tmp/setup
    profiles:
      - dev
      - production
      - staging

  postgres:
    image: postgres:15.3
    env_file:
      - .env
    ports:
      - 5432:5432
    labels:
      traefik.http.routers.postgres.rule: "Host(`postgres.localhost`)"
      traefik.enable: "true"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -p ${POSTGRES_PORT}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - valkyrie-network
    depends_on:
      traefik-proxy:
        condition: service_started
    profiles:
      - dev
      - production
      - staging

  valkyrie-otel-collector:
    image: otel/opentelemetry-collector-contrib
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./configs/telemetry/collector.yml:/etc/otel-collector-config.yaml
    ports:
      - 4317
      - 9090
    profiles:
      - production
      - staging

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "6831:6831/udp" # UDP port for Jaeger agent
      - "16686:16686" # Web UI
      - "14268:14268" # HTTP port for spans
    profiles:
      - production
      - staging

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./configs/telemetry/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    profiles:
      - production
      - staging

  # valkyrie_sandbox:
  #   container_name: "valkyrie_sandbox_1"
  #   image: valkyrie_sandbox_cs:0.0.1-ubuntu
  #   ports:
  #     - 9090
  #     - 1618
  #   labels:
  #     - "traefik.enable=true"
  #     # CS Service
  #     - "traefik.http.routers.valkyrie_sandbox_1-cs.rule=Host(`valkyrie_sandbox_1-cs.localhost`)"
  #     - "traefik.http.routers.valkyrie_sandbox_1-cs.entrypoints=web"
  #     - "traefik.http.routers.valkyrie_sandbox_1-cs.service=valkyrie_sandbox_1-cs"
  #     - "traefik.http.services.valkyrie_sandbox_1-cs.loadbalancer.server.port=9090"
  #     # AG Service
  #     - "traefik.http.routers.valkyrie_sandbox_1-ag.rule=Host(`valkyrie_sandbox_1-ag.localhost`)"
  #     - "traefik.http.routers.valkyrie_sandbox_1-ag.entrypoints=web"
  #     - "traefik.http.routers.valkyrie_sandbox_1-ag.service=valkyrie_sandbox_1-ag"
  #     - "traefik.http.services.valkyrie_sandbox_1-ag.loadbalancer.server.port=1618"
  #   depends_on:
  #     traefik-proxy:
  #       condition: service_started
  #   networks:
  #     - valkyrie-network

networks:
  valkyrie-network:
    driver: bridge
    external: true
