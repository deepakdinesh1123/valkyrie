services:
  odin:
    build:
      context: .
      dockerfile: build/package/dockerfiles/odin.dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    command: ["server", "start"]
    ports:
      - "8080:8080"

  odin-worker:
    build:
      context: .
      dockerfile: build/package/dockerfiles/odin.dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      odin:
        condition: service_started
    deploy:
      replicas: 1
    command: ["worker", "start"]
    privileged: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - ODIN_WORKER_EXECUTOR=container
      - ODIN_WORKER_CONTAINER_ENGINE=docker
      - POSTGRES_HOST=postgres

  postgres:
    image: postgres
    env_file:
      - .env
    ports:
      - "5432:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -p ${POSTGRES_PORT}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  # valkyrie-otel-collector:
  #   image: otel/opentelemetry-collector-contrib
  #   command: ["--config=/etc/otel-collector-config.yaml"]
  #   volumes:
  #     - ./configs/telemetry/collector.yml:/etc/otel-collector-config.yaml
  #   ports:
  #     - 4317:4317 # OTLP grpc receiver
  # jaeger:
  #   image: jaegertracing/all-in-one:latest
  #   ports:
  #     - "6831:6831/udp" # UDP port for Jaeger agent
  #     - "16686:16686" # Web UI
  #     - "14268:14268" # HTTP port for spans
  # prometheus:
  #   image: prom/prometheus:latest
  #   volumes:
  #     - ./configs/telemetry/prometheus.yml:/etc/prometheus/prometheus.yml
  #   ports:
  #     - "9090:9090"
