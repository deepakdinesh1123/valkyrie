// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: execution_result.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getAllExecutionResults = `-- name: GetAllExecutionResults :many
SELECT id, execution_id, result, code, devenv, execution_status, executed_at FROM ExecutionResult
ORDER BY executed_at
`

func (q *Queries) GetAllExecutionResults(ctx context.Context) ([]Executionresult, error) {
	rows, err := q.db.Query(ctx, getAllExecutionResults)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Executionresult
	for rows.Next() {
		var i Executionresult
		if err := rows.Scan(
			&i.ID,
			&i.ExecutionID,
			&i.Result,
			&i.Code,
			&i.Devenv,
			&i.ExecutionStatus,
			&i.ExecutedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResultUsingExecutionID = `-- name: GetResultUsingExecutionID :one
SELECT id, execution_id, result, code, devenv, execution_status, executed_at
FROM ExecutionResult
WHERE execution_id = $1 LIMIT 1
`

func (q *Queries) GetResultUsingExecutionID(ctx context.Context, executionID uuid.UUID) (Executionresult, error) {
	row := q.db.QueryRow(ctx, getResultUsingExecutionID, executionID)
	var i Executionresult
	err := row.Scan(
		&i.ID,
		&i.ExecutionID,
		&i.Result,
		&i.Code,
		&i.Devenv,
		&i.ExecutionStatus,
		&i.ExecutedAt,
	)
	return i, err
}

const insertExecutionResult = `-- name: InsertExecutionResult :one
INSERT INTO ExecutionResult (
    execution_id,
    result,
    code,
    devenv,
    execution_status,
    executed_at
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, execution_id, result, code, devenv, execution_status, executed_at
`

type InsertExecutionResultParams struct {
	ExecutionID     uuid.UUID
	Result          pgtype.Text
	Code            pgtype.Text
	Devenv          pgtype.Text
	ExecutionStatus pgtype.Text
	ExecutedAt      pgtype.Timestamp
}

func (q *Queries) InsertExecutionResult(ctx context.Context, arg InsertExecutionResultParams) (Executionresult, error) {
	row := q.db.QueryRow(ctx, insertExecutionResult,
		arg.ExecutionID,
		arg.Result,
		arg.Code,
		arg.Devenv,
		arg.ExecutionStatus,
		arg.ExecutedAt,
	)
	var i Executionresult
	err := row.Scan(
		&i.ID,
		&i.ExecutionID,
		&i.Result,
		&i.Code,
		&i.Devenv,
		&i.ExecutionStatus,
		&i.ExecutedAt,
	)
	return i, err
}
