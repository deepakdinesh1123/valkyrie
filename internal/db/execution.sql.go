// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: execution.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getAllExecutionResults = `-- name: GetAllExecutionResults :many
SELECT execution_id, result, execution_status, executed_at FROM Execution
ORDER BY executed_at
`

type GetAllExecutionResultsRow struct {
	ExecutionID     uuid.UUID
	Result          pgtype.Text
	ExecutionStatus pgtype.Text
	ExecutedAt      pgtype.Timestamp
}

func (q *Queries) GetAllExecutionResults(ctx context.Context) ([]GetAllExecutionResultsRow, error) {
	rows, err := q.db.Query(ctx, getAllExecutionResults)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllExecutionResultsRow
	for rows.Next() {
		var i GetAllExecutionResultsRow
		if err := rows.Scan(
			&i.ExecutionID,
			&i.Result,
			&i.ExecutionStatus,
			&i.ExecutedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllExecutions = `-- name: GetAllExecutions :many
SELECT id, execution_id, code, environment, requested_at, result, execution_status, executed_at FROM Execution
ORDER BY executed_at
`

func (q *Queries) GetAllExecutions(ctx context.Context) ([]Execution, error) {
	rows, err := q.db.Query(ctx, getAllExecutions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Execution
	for rows.Next() {
		var i Execution
		if err := rows.Scan(
			&i.ID,
			&i.ExecutionID,
			&i.Code,
			&i.Environment,
			&i.RequestedAt,
			&i.Result,
			&i.ExecutionStatus,
			&i.ExecutedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResultUsingExecutionID = `-- name: GetResultUsingExecutionID :one
SELECT id, execution_id, code, environment, requested_at, result, execution_status, executed_at
FROM Execution
WHERE execution_id = $1 LIMIT 1
`

func (q *Queries) GetResultUsingExecutionID(ctx context.Context, executionID uuid.UUID) (Execution, error) {
	row := q.db.QueryRow(ctx, getResultUsingExecutionID, executionID)
	var i Execution
	err := row.Scan(
		&i.ID,
		&i.ExecutionID,
		&i.Code,
		&i.Environment,
		&i.RequestedAt,
		&i.Result,
		&i.ExecutionStatus,
		&i.ExecutedAt,
	)
	return i, err
}

const insertExecutionRequest = `-- name: InsertExecutionRequest :one
INSERT INTO Execution (
    execution_id,
    code,
    environment
) VALUES (
    $1, $2, $3
)
RETURNING execution_id
`

type InsertExecutionRequestParams struct {
	ExecutionID uuid.UUID
	Code        pgtype.Text
	Environment pgtype.Text
}

func (q *Queries) InsertExecutionRequest(ctx context.Context, arg InsertExecutionRequestParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertExecutionRequest, arg.ExecutionID, arg.Code, arg.Environment)
	var execution_id uuid.UUID
	err := row.Scan(&execution_id)
	return execution_id, err
}

const insertExecutionResult = `-- name: InsertExecutionResult :one
UPDATE Execution
SET (
    result,
    execution_status,
    executed_at
) = ($1, $2, $3)
WHERE execution_id = $4
RETURNING execution_id
`

type InsertExecutionResultParams struct {
	Result          pgtype.Text
	ExecutionStatus pgtype.Text
	ExecutedAt      pgtype.Timestamp
	ExecutionID     uuid.UUID
}

func (q *Queries) InsertExecutionResult(ctx context.Context, arg InsertExecutionResultParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertExecutionResult,
		arg.Result,
		arg.ExecutionStatus,
		arg.ExecutedAt,
		arg.ExecutionID,
	)
	var execution_id uuid.UUID
	err := row.Scan(&execution_id)
	return execution_id, err
}
