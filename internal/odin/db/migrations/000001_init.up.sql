create sequence packages_id_seq as bigint;

create table if not exists packages (
    package_id bigint primary key default nextval('packages_id_seq'),
    name text not null,
    version text not null,
    pkgType text not null,
    language text,
    store_path text,
    tsv_search TSVECTOR
);

create sequence languages_id_seq as bigint;

CREATE TABLE languages (
    id bigint PRIMARY KEY DEFAULT nextval('languages_id_seq'),
    name TEXT NOT NULL UNIQUE,                  
    extension TEXT NOT NULL,                    
    monaco_language TEXT NOT NULL,
    default_code TEXT NOT NULL                    
);

create sequence language_versions_id_seq as bigint;

CREATE TABLE language_versions (
    id bigint PRIMARY KEY DEFAULT nextval('language_versions_id_seq'),
    language_id BIGINT NOT NULL REFERENCES languages (id) ON DELETE CASCADE,
    version TEXT NOT NULL,
    nix_package_name TEXT NOT NULL,             
    template TEXT NOT NULL,                                                 
    search_query TEXT NOT NULL,                           
    UNIQUE (language_id, version)               
);

create sequence exec_request_id_seq as int;

create table exec_request (
    id int primary key default nextval('exec_request_id_seq'),
    hash text not null,
    code text,
    flake text not null,
    language_dependencies text[],
    system_dependencies text[],
    cmd_line_args varchar(1024),
    compile_args varchar(1024),
    files bytea,
    input text,
    command text,
    setup text,
    language_version BIGINT NOT NULL REFERENCES language_versions(id) ON DELETE SET NULL
);

create table job_groups (
    id int primary key generated by default as identity,
    name text not null unique,
    created_at timestamptz not null default now()
);

create table job_types (
	id int primary key generated by default as identity,
	name text not null unique,
    created_at timestamptz not null default now()
);

create table workers (
    id int primary key,
    name text not null unique,
    created_at timestamptz not null default now(),
    last_heartbeat timestamptz,
    current_state TEXT NOT NULL CHECK (current_state IN ('active', 'stale')) DEFAULT 'active'
);

create sequence workers_id_seq as int cycle owned by workers.id;
alter table workers alter column id set default nextval('workers_id_seq');

create sequence jobs_id_seq as bigint;

create table jobs (
    job_id bigint primary key default nextval('jobs_id_seq'),
    created_at timestamptz not null  default now(),
    updated_at timestamptz,
    time_out int,
    started_at timestamptz,
    exec_request_id int references exec_request on delete set null,
    current_state TEXT NOT NULL CHECK (current_state IN ('pending', 'scheduled', 'completed', 'failed', 'cancelled')) DEFAULT 'pending',
    retries int default 0,
    max_retries int default 5,
    worker_id int references workers on delete set null
);

create sequence executions_id_seq as bigint;

create table executions (
    exec_id bigint primary key default nextval('executions_id_seq'),
    job_id bigint references jobs on delete set null,
    worker_id int references workers on delete set null,
    started_at timestamptz not null,
    finished_at timestamptz not null,
    created_at timestamptz not null default now(),
    exec_request_id int references exec_request on delete set null,
    exec_logs text not null,
    nix_logs text,
    success boolean
);


INSERT INTO languages (name, extension, monaco_language, default_code) 
VALUES 
    ('python', 'py', 'python', 'print("Hello, World!")'),
    ('go', 'go', 'go', 'package main\n\nimport \"fmt\"\n\nfunc main() {\n\t// Type your Go code here\n}'),
    ('ada', 'adb', 'ada', 'with Ada.Text_IO; use Ada.Text_IO;\n\nprocedure Hello is\nbegin\n    Put_Line(\"Hello, World!\");\nend Hello;'),
    ('assembly', 'asm', 'assembly', 'hello'),
    ('bash', 'bash', 'shell',  'echo hello'), 
    ('bun',  'js', 'javascript', 'empty'),
    ('crystal', 'cr', 'crystal', 'puts "Hello World"'),
    ('dart', 'dart', 'dart', 'hello'),
    ('deno', 'ts', 'typescript', 'console.log("Hello World");'),
    ('fortran', 'f90', 'fortran', 'program hello\n    print *, "Hello, World!"\nend program hello'),
    ('groovy', 'groovy', 'groovy', 'println'),
    ('julia', 'jl', 'julia', 'println("Hello, World!")'),
    ('lua', 'lua', 'lua', 'print("Hello, World!")'),
    ('nim', 'nim', 'nim', 'echo "Hello, World!"'),
    ('node', 'js', 'javascript', '// Type your JavaScript code here\n\nfunction main() {\n    // Your code here\n}\n\nmain();'),
    ('perl', 'pl', 'perl', '#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nprint "Hello, World!\\n";'),
    ('php', 'php', 'php', '<?php\necho "Hello, World!";\n?>\n'),
    ('rust', 'rs', 'rust', 'fn main() {\n    println!("Hello, world!");\n}'),
    ('ruby', 'rb', 'ruby', 'puts "Hello, World!"'),
    ('sql', 'sql', 'sql', 'CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(100), salary DECIMAL(10, 2));'),
    -- ('swift', 'swift', 'swift', 'print("Hello, World!")'),
    ('zig', 'zig', 'zig', 'const std = @import("std");\n\npub fn main() !void {\n    const stdout = std.io.getStdOut().writer();\n    try stdout.print("Hello, World!\\n", .{});\n}');




INSERT INTO language_versions (language_id, version, nix_package_name, template, search_query) 
VALUES 
    (1, '3.11', 'python3' , 'python.tmpl', 'python311Packages'),
    (2, '1.22.6', 'go_1_22', 'go.tmpl', 'goPackages'),
    (3, '13.2.0', 'gnat13',  'ada.tmpl', 'adaPackages'),
    (4, '2.16.03', 'nasm', 'assembly.tmpl', 'assemblyPackages'),
    (5, '5.2p32', 'bash', 'bash.tmpl', 'bashPackages'),
    (6, '1.18', 'bun', 'bun.tmpl', 'bunPackages'),
    (7, '1.11.2',  'crystal', 'crystal.tmpl', 'crystalPackages'),
    (8, '3.3.4', 'dart', 'dart.tmpl', 'dartPackages');

-- Deno versions
INSERT INTO language_versions (language_id, version, nix_package_name, template, search_query) VALUES
(9, '1.44.3', 'deno', 'deno.tmpl', 'deno');

-- Fortran versions
INSERT INTO language_versions (language_id, version, nix_package_name, template, search_query) VALUES
(10, '13.2.0', 'gfortran', 'fortran.tmpl', 'fortran'),
(10, '12.3.0', 'gfortran12', 'fortran.tmpl', 'fortran');

-- Groovy version
INSERT INTO language_versions (language_id, version, nix_package_name, template, search_query) VALUES
(11, '3.0.11', 'groovy', 'groovy.tmpl', 'groovy');

-- Julia version
INSERT INTO language_versions (language_id, version, nix_package_name, template, search_query) VALUES
(12, '1.10.3', 'julia', 'julia.tmpl', 'julia');

-- Lua version
INSERT INTO language_versions (language_id, version, nix_package_name, template, search_query) VALUES
(13, '5.2.4', 'lua', 'lua.tmpl', 'lua');

-- Nim version
INSERT INTO language_versions (language_id, version, nix_package_name, template, search_query) VALUES
(14, '2.0.4', 'nim', 'nim.tmpl', 'nim');

-- Node.js versions
INSERT INTO language_versions (language_id, version, nix_package_name, template, search_query) VALUES
(15, '22.4.1', 'nodejs_22', 'node.tmpl', 'nodePackages'),
(15, '20.15.1', 'nodejs_20', 'node.tmpl', 'nodePackages'),
(15, '18.20.4', 'nodejs_18', 'node.tmpl', 'nodePackages');

-- Perl version
INSERT INTO language_versions (language_id, version, nix_package_name, template, search_query) VALUES
(16, '5.38.2', 'perl', 'perl.tmpl', 'perl');

-- PHP versions
INSERT INTO language_versions (language_id, version, nix_package_name, template, search_query) VALUES
(17, '8.2.24', 'php', 'php.tmpl', 'php'),
(17, '8.3.12', 'php83', 'php.tmpl', 'php'),
(17, '8.1.30', 'php81', 'php.tmpl', 'php');

-- Rust version
INSERT INTO language_versions (language_id, version, nix_package_name, template, search_query) VALUES
(18, '1.77.1', 'rustc', 'rust.tmpl', 'rust');

-- Ruby versions
INSERT INTO language_versions (language_id, version, nix_package_name, template, search_query) VALUES
(19, '3.1.6', 'ruby', 'ruby.tmpl', 'ruby'),
(19, '3.2.4', 'ruby_3_2', 'ruby.tmpl', 'ruby'),
(19, '3.3.5', 'ruby_3_3', 'ruby.tmpl', 'ruby');

-- SQL version
INSERT INTO language_versions (language_id, version, nix_package_name, template, search_query) VALUES
(20, '3.45.3', 'sqlite', 'sql.tmpl', 'sql');

-- -- Swift version
-- INSERT INTO language_versions (language_id, version, nix_package_name, template, search_query) VALUES
-- (21, '5.8', 'swift', 'swift.tmpl', 'swift');

-- Zig version
INSERT INTO language_versions (language_id, version, nix_package_name, template, search_query) VALUES
(21, '3.45.3', 'zig', 'zig.tmpl', 'zig');




