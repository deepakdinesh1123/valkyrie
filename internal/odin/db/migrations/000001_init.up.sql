create table job_groups (
    id int primary key generated by default as identity,
    name text not null unique,
    created_at timestamptz not null default now()
);

create table job_types (
	id int primary key generated by default as identity,
	name text not null unique,
    created_at timestamptz not null default now()
);

create table workers (
    id int primary key,
    name text not null unique,
    created_at timestamptz not null default now(),
    last_heartbeat timestamptz
);

create sequence workers_id_seq as int cycle owned by workers.id;
alter table workers alter column id set default nextval('workers_id_seq');

create sequence jobs_id_seq as bigint;
create sequence exec_request_id_seq as int;

create table exec_request (
    id int primary key default nextval('exec_request_id_seq'),
    hash text not null,
    code text not null,
    path text not null,
    flake text not null,
    nix_script text not null,
    args varchar(1024),
    programming_language text
);

create table jobs (
    job_id bigint primary key default nextval('jobs_id_seq'),
    created_at timestamptz not null  default now(),
    updated_at timestamptz,
    time_out int,
    started_at timestamptz,
    exec_request_id int references exec_request on delete set null,
    current_state TEXT NOT NULL CHECK (current_state IN ('pending', 'scheduled', 'completed', 'failed', 'cancelled')) DEFAULT 'pending',
    retries int default 0,
    max_retries int default 5,
    worker_id int references workers on delete set null
);

create sequence executions_id_seq as bigint;

create table executions (
    exec_id bigint primary key default nextval('executions_id_seq'),
    job_id bigint references jobs on delete set null,
    worker_id int references workers on delete set null,
    started_at timestamptz not null,
    finished_at timestamptz not null,
    created_at timestamptz not null default now(),
    exec_request_id int references exec_request on delete set null,
    exec_logs text not null,
    nix_logs text,
    success boolean
);