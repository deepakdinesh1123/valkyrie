// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: job.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const cancelJob = `-- name: CancelJob :exec
update jobs set status = 'cancelled' where id = $1
`

func (q *Queries) CancelJob(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, cancelJob, id)
	return err
}

const deleteJob = `-- name: DeleteJob :exec
delete from jobs where id = $1 and completed = false
`

func (q *Queries) DeleteJob(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteJob, id)
	return err
}

const fetchJob = `-- name: FetchJob :one
update jobs set status = 'scheduled'
where id = (
    select id from jobs
    where 
        status = 'pending'
        and retries < max_retries
    order by
        id asc
    for update skip locked
    limit 1
    )
returning id, created_at, updated_at, exec_request_id, status, retries, max_retries
`

func (q *Queries) FetchJob(ctx context.Context) (Job, error) {
	row := q.db.QueryRow(ctx, fetchJob)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExecRequestID,
		&i.Status,
		&i.Retries,
		&i.MaxRetries,
	)
	return i, err
}

const getAllExecutionResults = `-- name: GetAllExecutionResults :many
select job_runs.id, job_id, worker_id, started_at, finished_at, exec_request_id, logs, exec_request.id, hash, code, path, flake, args, programming_language from job_runs
inner join exec_request on job_runs.exec_request_id = exec_request.id
order by started_at desc
limit $1 offset $2
`

type GetAllExecutionResultsParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

type GetAllExecutionResultsRow struct {
	ID                  int64              `db:"id" json:"id"`
	JobID               int64              `db:"job_id" json:"job_id"`
	WorkerID            int32              `db:"worker_id" json:"worker_id"`
	StartedAt           pgtype.Timestamptz `db:"started_at" json:"started_at"`
	FinishedAt          pgtype.Timestamptz `db:"finished_at" json:"finished_at"`
	ExecRequestID       pgtype.Int4        `db:"exec_request_id" json:"exec_request_id"`
	Logs                string             `db:"logs" json:"logs"`
	ID_2                int32              `db:"id_2" json:"id_2"`
	Hash                string             `db:"hash" json:"hash"`
	Code                string             `db:"code" json:"code"`
	Path                string             `db:"path" json:"path"`
	Flake               string             `db:"flake" json:"flake"`
	Args                pgtype.Text        `db:"args" json:"args"`
	ProgrammingLanguage pgtype.Text        `db:"programming_language" json:"programming_language"`
}

func (q *Queries) GetAllExecutionResults(ctx context.Context, arg GetAllExecutionResultsParams) ([]GetAllExecutionResultsRow, error) {
	rows, err := q.db.Query(ctx, getAllExecutionResults, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllExecutionResultsRow
	for rows.Next() {
		var i GetAllExecutionResultsRow
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.WorkerID,
			&i.StartedAt,
			&i.FinishedAt,
			&i.ExecRequestID,
			&i.Logs,
			&i.ID_2,
			&i.Hash,
			&i.Code,
			&i.Path,
			&i.Flake,
			&i.Args,
			&i.ProgrammingLanguage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllJobs = `-- name: GetAllJobs :many
select jobs.id, created_at, updated_at, exec_request_id, status, retries, max_retries, exec_request.id, hash, code, path, flake, args, programming_language from jobs
inner join exec_request on jobs.exec_request_id = exec_request.id
order by jobs.id
limit $1 offset $2
`

type GetAllJobsParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

type GetAllJobsRow struct {
	ID                  int64              `db:"id" json:"id"`
	CreatedAt           pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt           pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	ExecRequestID       pgtype.Int4        `db:"exec_request_id" json:"exec_request_id"`
	Status              string             `db:"status" json:"status"`
	Retries             pgtype.Int4        `db:"retries" json:"retries"`
	MaxRetries          pgtype.Int4        `db:"max_retries" json:"max_retries"`
	ID_2                int32              `db:"id_2" json:"id_2"`
	Hash                string             `db:"hash" json:"hash"`
	Code                string             `db:"code" json:"code"`
	Path                string             `db:"path" json:"path"`
	Flake               string             `db:"flake" json:"flake"`
	Args                pgtype.Text        `db:"args" json:"args"`
	ProgrammingLanguage pgtype.Text        `db:"programming_language" json:"programming_language"`
}

func (q *Queries) GetAllJobs(ctx context.Context, arg GetAllJobsParams) ([]GetAllJobsRow, error) {
	rows, err := q.db.Query(ctx, getAllJobs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllJobsRow
	for rows.Next() {
		var i GetAllJobsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExecRequestID,
			&i.Status,
			&i.Retries,
			&i.MaxRetries,
			&i.ID_2,
			&i.Hash,
			&i.Code,
			&i.Path,
			&i.Flake,
			&i.Args,
			&i.ProgrammingLanguage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExecutionResultsByID = `-- name: GetExecutionResultsByID :many
select job_runs.id, job_id, worker_id, started_at, finished_at, exec_request_id, logs, exec_request.id, hash, code, path, flake, args, programming_language from job_runs
inner join exec_request on job_runs.exec_request_id = exec_request.id
where job_runs.job_id = $1
limit $2 offset $3
`

type GetExecutionResultsByIDParams struct {
	JobID  int64 `db:"job_id" json:"job_id"`
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

type GetExecutionResultsByIDRow struct {
	ID                  int64              `db:"id" json:"id"`
	JobID               int64              `db:"job_id" json:"job_id"`
	WorkerID            int32              `db:"worker_id" json:"worker_id"`
	StartedAt           pgtype.Timestamptz `db:"started_at" json:"started_at"`
	FinishedAt          pgtype.Timestamptz `db:"finished_at" json:"finished_at"`
	ExecRequestID       pgtype.Int4        `db:"exec_request_id" json:"exec_request_id"`
	Logs                string             `db:"logs" json:"logs"`
	ID_2                int32              `db:"id_2" json:"id_2"`
	Hash                string             `db:"hash" json:"hash"`
	Code                string             `db:"code" json:"code"`
	Path                string             `db:"path" json:"path"`
	Flake               string             `db:"flake" json:"flake"`
	Args                pgtype.Text        `db:"args" json:"args"`
	ProgrammingLanguage pgtype.Text        `db:"programming_language" json:"programming_language"`
}

func (q *Queries) GetExecutionResultsByID(ctx context.Context, arg GetExecutionResultsByIDParams) ([]GetExecutionResultsByIDRow, error) {
	rows, err := q.db.Query(ctx, getExecutionResultsByID, arg.JobID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExecutionResultsByIDRow
	for rows.Next() {
		var i GetExecutionResultsByIDRow
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.WorkerID,
			&i.StartedAt,
			&i.FinishedAt,
			&i.ExecRequestID,
			&i.Logs,
			&i.ID_2,
			&i.Hash,
			&i.Code,
			&i.Path,
			&i.Flake,
			&i.Args,
			&i.ProgrammingLanguage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJob = `-- name: GetJob :one
select jobs.id, created_at, updated_at, exec_request_id, status, retries, max_retries, exec_request.id, hash, code, path, flake, args, programming_language from jobs inner join exec_request on jobs.exec_request_id = exec_request.id where jobs.id = $1
`

type GetJobRow struct {
	ID                  int64              `db:"id" json:"id"`
	CreatedAt           pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt           pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	ExecRequestID       pgtype.Int4        `db:"exec_request_id" json:"exec_request_id"`
	Status              string             `db:"status" json:"status"`
	Retries             pgtype.Int4        `db:"retries" json:"retries"`
	MaxRetries          pgtype.Int4        `db:"max_retries" json:"max_retries"`
	ID_2                int32              `db:"id_2" json:"id_2"`
	Hash                string             `db:"hash" json:"hash"`
	Code                string             `db:"code" json:"code"`
	Path                string             `db:"path" json:"path"`
	Flake               string             `db:"flake" json:"flake"`
	Args                pgtype.Text        `db:"args" json:"args"`
	ProgrammingLanguage pgtype.Text        `db:"programming_language" json:"programming_language"`
}

func (q *Queries) GetJob(ctx context.Context, id int64) (GetJobRow, error) {
	row := q.db.QueryRow(ctx, getJob, id)
	var i GetJobRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExecRequestID,
		&i.Status,
		&i.Retries,
		&i.MaxRetries,
		&i.ID_2,
		&i.Hash,
		&i.Code,
		&i.Path,
		&i.Flake,
		&i.Args,
		&i.ProgrammingLanguage,
	)
	return i, err
}

const getTotalExecutions = `-- name: GetTotalExecutions :one
select count(*) from job_runs
`

func (q *Queries) GetTotalExecutions(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalExecutions)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTotalExecutionsForJob = `-- name: GetTotalExecutionsForJob :one
select count(*) from job_runs where job_id = $1
`

func (q *Queries) GetTotalExecutionsForJob(ctx context.Context, jobID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalExecutionsForJob, jobID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTotalJobs = `-- name: GetTotalJobs :one
SELECT count(*) FROM jobs
`

func (q *Queries) GetTotalJobs(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalJobs)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertJob = `-- name: InsertJob :one
insert into jobs
    (exec_request_id, max_retries)
values
    ($1, $2)
returning id, created_at, updated_at, exec_request_id, status, retries, max_retries
`

type InsertJobParams struct {
	ExecRequestID pgtype.Int4 `db:"exec_request_id" json:"exec_request_id"`
	MaxRetries    pgtype.Int4 `db:"max_retries" json:"max_retries"`
}

func (q *Queries) InsertJob(ctx context.Context, arg InsertJobParams) (Job, error) {
	row := q.db.QueryRow(ctx, insertJob, arg.ExecRequestID, arg.MaxRetries)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExecRequestID,
		&i.Status,
		&i.Retries,
		&i.MaxRetries,
	)
	return i, err
}

const insertJobRun = `-- name: InsertJobRun :one
insert into job_runs
    (job_id, worker_id, started_at, finished_at, exec_request_id, logs)
values
    ($1, $2, $3, $4, $5, $6)
returning id, job_id, worker_id, started_at, finished_at, exec_request_id, logs
`

type InsertJobRunParams struct {
	JobID         int64              `db:"job_id" json:"job_id"`
	WorkerID      int32              `db:"worker_id" json:"worker_id"`
	StartedAt     pgtype.Timestamptz `db:"started_at" json:"started_at"`
	FinishedAt    pgtype.Timestamptz `db:"finished_at" json:"finished_at"`
	ExecRequestID pgtype.Int4        `db:"exec_request_id" json:"exec_request_id"`
	Logs          string             `db:"logs" json:"logs"`
}

func (q *Queries) InsertJobRun(ctx context.Context, arg InsertJobRunParams) (JobRun, error) {
	row := q.db.QueryRow(ctx, insertJobRun,
		arg.JobID,
		arg.WorkerID,
		arg.StartedAt,
		arg.FinishedAt,
		arg.ExecRequestID,
		arg.Logs,
	)
	var i JobRun
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.WorkerID,
		&i.StartedAt,
		&i.FinishedAt,
		&i.ExecRequestID,
		&i.Logs,
	)
	return i, err
}

const pruneCompletedJobs = `-- name: PruneCompletedJobs :exec
delete from jobs where status = 'completed'
`

func (q *Queries) PruneCompletedJobs(ctx context.Context) error {
	_, err := q.db.Exec(ctx, pruneCompletedJobs)
	return err
}

const retryJob = `-- name: RetryJob :exec
update jobs
set
    status = 'pending',
    retries = retries + 1,
    updated_at = now()
where id = $1 AND status = 'scheduled'
`

func (q *Queries) RetryJob(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, retryJob, id)
	return err
}

const stopJob = `-- name: StopJob :exec
update jobs set status = 'pending' where id = $1
`

func (q *Queries) StopJob(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, stopJob, id)
	return err
}

const updateJobCompleted = `-- name: UpdateJobCompleted :exec
update jobs
set
    status = 'completed',
    updated_at = now()
where id = $1 AND status = 'scheduled'
`

func (q *Queries) UpdateJobCompleted(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateJobCompleted, id)
	return err
}

const updateJobFailed = `-- name: updateJobFailed :exec
update jobs
set
    status = 'failed',
    updated_at = now()
where id = $1 AND status = 'scheduled'
`

func (q *Queries) updateJobFailed(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateJobFailed, id)
	return err
}
