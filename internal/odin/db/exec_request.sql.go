// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: exec_request.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteExecRequest = `-- name: DeleteExecRequest :exec
delete from exec_request where id = $1
`

func (q *Queries) DeleteExecRequest(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteExecRequest, id)
	return err
}

const getExecRequest = `-- name: GetExecRequest :one
select id, hash, code, path, flake, nix_script, args, programming_language from exec_request where id = $1
`

func (q *Queries) GetExecRequest(ctx context.Context, id int32) (ExecRequest, error) {
	row := q.db.QueryRow(ctx, getExecRequest, id)
	var i ExecRequest
	err := row.Scan(
		&i.ID,
		&i.Hash,
		&i.Code,
		&i.Path,
		&i.Flake,
		&i.NixScript,
		&i.Args,
		&i.ProgrammingLanguage,
	)
	return i, err
}

const getExecRequestByHash = `-- name: GetExecRequestByHash :one
select id, hash, code, path, flake, nix_script, args, programming_language from exec_request where hash = $1
`

func (q *Queries) GetExecRequestByHash(ctx context.Context, hash string) (ExecRequest, error) {
	row := q.db.QueryRow(ctx, getExecRequestByHash, hash)
	var i ExecRequest
	err := row.Scan(
		&i.ID,
		&i.Hash,
		&i.Code,
		&i.Path,
		&i.Flake,
		&i.NixScript,
		&i.Args,
		&i.ProgrammingLanguage,
	)
	return i, err
}

const insertExecRequest = `-- name: InsertExecRequest :one
insert into exec_request
    (hash, code, path, flake, args, programming_language, nix_script)
values
    ($1, $2, $3, $4, $5, $6, $7)
returning id
`

type InsertExecRequestParams struct {
	Hash                string      `db:"hash" json:"hash"`
	Code                string      `db:"code" json:"code"`
	Path                string      `db:"path" json:"path"`
	Flake               string      `db:"flake" json:"flake"`
	Args                pgtype.Text `db:"args" json:"args"`
	ProgrammingLanguage pgtype.Text `db:"programming_language" json:"programming_language"`
	NixScript           string      `db:"nix_script" json:"nix_script"`
}

func (q *Queries) InsertExecRequest(ctx context.Context, arg InsertExecRequestParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertExecRequest,
		arg.Hash,
		arg.Code,
		arg.Path,
		arg.Flake,
		arg.Args,
		arg.ProgrammingLanguage,
		arg.NixScript,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const listExecRequests = `-- name: ListExecRequests :many
select id, hash, code, path, flake, nix_script, args, programming_language from exec_request
where id <= $1
order by id desc
limit $2
`

type ListExecRequestsParams struct {
	ID    int32 `db:"id" json:"id"`
	Limit int32 `db:"limit" json:"limit"`
}

func (q *Queries) ListExecRequests(ctx context.Context, arg ListExecRequestsParams) ([]ExecRequest, error) {
	rows, err := q.db.Query(ctx, listExecRequests, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExecRequest
	for rows.Next() {
		var i ExecRequest
		if err := rows.Scan(
			&i.ID,
			&i.Hash,
			&i.Code,
			&i.Path,
			&i.Flake,
			&i.NixScript,
			&i.Args,
			&i.ProgrammingLanguage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
