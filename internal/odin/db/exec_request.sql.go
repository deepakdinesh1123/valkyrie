// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: exec_request.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteExecRequest = `-- name: DeleteExecRequest :exec
delete from exec_request where id = $1
`

func (q *Queries) DeleteExecRequest(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteExecRequest, id)
	return err
}

const getExecRequest = `-- name: GetExecRequest :one
select id, hash, code, flake, language_dependencies, system_dependencies, cmd_line_args, compile_args, files, input, command, setup, language_version from exec_request where id = $1
`

func (q *Queries) GetExecRequest(ctx context.Context, id int32) (ExecRequest, error) {
	row := q.db.QueryRow(ctx, getExecRequest, id)
	var i ExecRequest
	err := row.Scan(
		&i.ID,
		&i.Hash,
		&i.Code,
		&i.Flake,
		&i.LanguageDependencies,
		&i.SystemDependencies,
		&i.CmdLineArgs,
		&i.CompileArgs,
		&i.Files,
		&i.Input,
		&i.Command,
		&i.Setup,
		&i.LanguageVersion,
	)
	return i, err
}

const getExecRequestByHash = `-- name: GetExecRequestByHash :one
select id, hash, code, flake, language_dependencies, system_dependencies, cmd_line_args, compile_args, files, input, command, setup, language_version from exec_request where hash = $1
`

func (q *Queries) GetExecRequestByHash(ctx context.Context, hash string) (ExecRequest, error) {
	row := q.db.QueryRow(ctx, getExecRequestByHash, hash)
	var i ExecRequest
	err := row.Scan(
		&i.ID,
		&i.Hash,
		&i.Code,
		&i.Flake,
		&i.LanguageDependencies,
		&i.SystemDependencies,
		&i.CmdLineArgs,
		&i.CompileArgs,
		&i.Files,
		&i.Input,
		&i.Command,
		&i.Setup,
		&i.LanguageVersion,
	)
	return i, err
}

const insertExecRequest = `-- name: InsertExecRequest :one
insert into exec_request
    (
        hash, 
        code, 
        flake, 
        language_dependencies, 
        system_dependencies, 
        cmd_line_args, 
        compile_args,
        files,
        input,
        command,
        setup,
        language_version
    )
values
    ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
returning id
`

type InsertExecRequestParams struct {
	Hash                 string      `db:"hash" json:"hash"`
	Code                 pgtype.Text `db:"code" json:"code"`
	Flake                string      `db:"flake" json:"flake"`
	LanguageDependencies []string    `db:"language_dependencies" json:"language_dependencies"`
	SystemDependencies   []string    `db:"system_dependencies" json:"system_dependencies"`
	CmdLineArgs          pgtype.Text `db:"cmd_line_args" json:"cmd_line_args"`
	CompileArgs          pgtype.Text `db:"compile_args" json:"compile_args"`
	Files                []byte      `db:"files" json:"files"`
	Input                pgtype.Text `db:"input" json:"input"`
	Command              pgtype.Text `db:"command" json:"command"`
	Setup                pgtype.Text `db:"setup" json:"setup"`
	LanguageVersion      int64       `db:"language_version" json:"language_version"`
}

func (q *Queries) InsertExecRequest(ctx context.Context, arg InsertExecRequestParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertExecRequest,
		arg.Hash,
		arg.Code,
		arg.Flake,
		arg.LanguageDependencies,
		arg.SystemDependencies,
		arg.CmdLineArgs,
		arg.CompileArgs,
		arg.Files,
		arg.Input,
		arg.Command,
		arg.Setup,
		arg.LanguageVersion,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const listExecRequests = `-- name: ListExecRequests :many
select id, hash, code, flake, language_dependencies, system_dependencies, cmd_line_args, compile_args, files, input, command, setup, language_version from exec_request
limit $1 offset $2
`

type ListExecRequestsParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListExecRequests(ctx context.Context, arg ListExecRequestsParams) ([]ExecRequest, error) {
	rows, err := q.db.Query(ctx, listExecRequests, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExecRequest
	for rows.Next() {
		var i ExecRequest
		if err := rows.Scan(
			&i.ID,
			&i.Hash,
			&i.Code,
			&i.Flake,
			&i.LanguageDependencies,
			&i.SystemDependencies,
			&i.CmdLineArgs,
			&i.CompileArgs,
			&i.Files,
			&i.Input,
			&i.Command,
			&i.Setup,
			&i.LanguageVersion,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
