// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: worker.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllWorkers = `-- name: GetAllWorkers :many
SELECT id, name, created_at, created_by, modified_at, modified_by FROM Worker
`

func (q *Queries) GetAllWorkers(ctx context.Context) ([]Worker, error) {
	rows, err := q.db.Query(ctx, getAllWorkers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Worker
	for rows.Next() {
		var i Worker
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.ModifiedAt,
			&i.ModifiedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorker = `-- name: GetWorker :one
SELECT id, name, created_at, created_by, modified_at, modified_by FROM Worker
WHERE name = $1
LIMIT 1
`

func (q *Queries) GetWorker(ctx context.Context, name pgtype.Text) (Worker, error) {
	row := q.db.QueryRow(ctx, getWorker, name)
	var i Worker
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.ModifiedAt,
		&i.ModifiedBy,
	)
	return i, err
}

const insertWorker = `-- name: InsertWorker :one
INSERT INTO Worker
    (name)
VALUES
    ($1)
RETURNING id, name, created_at, created_by, modified_at, modified_by
`

func (q *Queries) InsertWorker(ctx context.Context, name pgtype.Text) (Worker, error) {
	row := q.db.QueryRow(ctx, insertWorker, name)
	var i Worker
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.ModifiedAt,
		&i.ModifiedBy,
	)
	return i, err
}
