// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: sandbox.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const fetchSandboxJob = `-- name: FetchSandboxJob :one
update sandboxes set current_state = 'creating', started_at = now(), worker_id = $1, updated_at = now()
where sandbox_id = (
    select sandbox_id from sandboxes
    where 
        current_state = 'pending'
    order by
        sandbox_id asc
    for update skip locked
    limit 1
    )
returning sandbox_id, worker_id, started_at, created_at, updated_at, git_url, sandbox_url, password, current_state
`

func (q *Queries) FetchSandboxJob(ctx context.Context, workerID pgtype.Int4) (Sandbox, error) {
	row := q.db.QueryRow(ctx, fetchSandboxJob, workerID)
	var i Sandbox
	err := row.Scan(
		&i.SandboxID,
		&i.WorkerID,
		&i.StartedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GitUrl,
		&i.SandboxUrl,
		&i.Password,
		&i.CurrentState,
	)
	return i, err
}

const getSandbox = `-- name: GetSandbox :one
select sandbox_id, worker_id, started_at, created_at, updated_at, git_url, sandbox_url, password, current_state
from sandboxes
where  sandbox_id = $1
`

func (q *Queries) GetSandbox(ctx context.Context, sandboxID int64) (Sandbox, error) {
	row := q.db.QueryRow(ctx, getSandbox, sandboxID)
	var i Sandbox
	err := row.Scan(
		&i.SandboxID,
		&i.WorkerID,
		&i.StartedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GitUrl,
		&i.SandboxUrl,
		&i.Password,
		&i.CurrentState,
	)
	return i, err
}

const insertSandbox = `-- name: InsertSandbox :one
insert into sandboxes (git_url)
values ($1)
returning sandbox_id, worker_id, started_at, created_at, updated_at, git_url, sandbox_url, password, current_state
`

func (q *Queries) InsertSandbox(ctx context.Context, gitUrl pgtype.Text) (Sandbox, error) {
	row := q.db.QueryRow(ctx, insertSandbox, gitUrl)
	var i Sandbox
	err := row.Scan(
		&i.SandboxID,
		&i.WorkerID,
		&i.StartedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GitUrl,
		&i.SandboxUrl,
		&i.Password,
		&i.CurrentState,
	)
	return i, err
}

const markSandboxRunning = `-- name: MarkSandboxRunning :exec
update sandboxes set
started_at = now(),
sandbox_url = $2,
password = $3,
current_state = 'running',
updated_at = now()
where sandbox_id = $1
`

type MarkSandboxRunningParams struct {
	SandboxID  int64       `db:"sandbox_id" json:"sandbox_id"`
	SandboxUrl pgtype.Text `db:"sandbox_url" json:"sandbox_url"`
	Password   []byte      `db:"password" json:"password"`
}

func (q *Queries) MarkSandboxRunning(ctx context.Context, arg MarkSandboxRunningParams) error {
	_, err := q.db.Exec(ctx, markSandboxRunning, arg.SandboxID, arg.SandboxUrl, arg.Password)
	return err
}

const updateSandboxPassword = `-- name: UpdateSandboxPassword :exec
update sandboxes set
password = $2
where sandbox_id = $1
`

type UpdateSandboxPasswordParams struct {
	SandboxID int64  `db:"sandbox_id" json:"sandbox_id"`
	Password  []byte `db:"password" json:"password"`
}

func (q *Queries) UpdateSandboxPassword(ctx context.Context, arg UpdateSandboxPasswordParams) error {
	_, err := q.db.Exec(ctx, updateSandboxPassword, arg.SandboxID, arg.Password)
	return err
}

const updateSandboxStartTime = `-- name: UpdateSandboxStartTime :exec
update sandboxes set
started_at = $2
where sandbox_id = $1
`

type UpdateSandboxStartTimeParams struct {
	SandboxID int64              `db:"sandbox_id" json:"sandbox_id"`
	StartedAt pgtype.Timestamptz `db:"started_at" json:"started_at"`
}

func (q *Queries) UpdateSandboxStartTime(ctx context.Context, arg UpdateSandboxStartTimeParams) error {
	_, err := q.db.Exec(ctx, updateSandboxStartTime, arg.SandboxID, arg.StartedAt)
	return err
}

const updateSandboxState = `-- name: UpdateSandboxState :exec
update  sandboxes set
current_state = $2
where sandbox_id =  $1
`

type UpdateSandboxStateParams struct {
	SandboxID    int64  `db:"sandbox_id" json:"sandbox_id"`
	CurrentState string `db:"current_state" json:"current_state"`
}

func (q *Queries) UpdateSandboxState(ctx context.Context, arg UpdateSandboxStateParams) error {
	_, err := q.db.Exec(ctx, updateSandboxState, arg.SandboxID, arg.CurrentState)
	return err
}
