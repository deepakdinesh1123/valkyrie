// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: sandbox.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const fetchSandboxJob = `-- name: FetchSandboxJob :one
update sandboxes set current_state = 'creating', started_at = now(), worker_id = $1, updated_at = now()
where sandbox_id = (
    select sandbox_id from sandboxes
    where 
        current_state = 'pending'
    order by
        sandbox_id asc
    for update skip locked
    limit 1
    )
returning sandbox_id, worker_id, started_at, created_at, updated_at, git_url, sandbox_url, current_state
`

func (q *Queries) FetchSandboxJob(ctx context.Context, workerID pgtype.Int4) (Sandbox, error) {
	row := q.db.QueryRow(ctx, fetchSandboxJob, workerID)
	var i Sandbox
	err := row.Scan(
		&i.SandboxID,
		&i.WorkerID,
		&i.StartedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GitUrl,
		&i.SandboxUrl,
		&i.CurrentState,
	)
	return i, err
}

const getSandbox = `-- name: GetSandbox :one
select worker_id, started_at, created_at, git_url, sandbox_url
from sandboxes
where  sandbox_id = $1
`

type GetSandboxRow struct {
	WorkerID   pgtype.Int4        `db:"worker_id" json:"worker_id"`
	StartedAt  pgtype.Timestamptz `db:"started_at" json:"started_at"`
	CreatedAt  pgtype.Timestamptz `db:"created_at" json:"created_at"`
	GitUrl     pgtype.Text        `db:"git_url" json:"git_url"`
	SandboxUrl pgtype.Text        `db:"sandbox_url" json:"sandbox_url"`
}

func (q *Queries) GetSandbox(ctx context.Context, sandboxID int64) (GetSandboxRow, error) {
	row := q.db.QueryRow(ctx, getSandbox, sandboxID)
	var i GetSandboxRow
	err := row.Scan(
		&i.WorkerID,
		&i.StartedAt,
		&i.CreatedAt,
		&i.GitUrl,
		&i.SandboxUrl,
	)
	return i, err
}

const insertSandbox = `-- name: InsertSandbox :one
insert into sandboxes (git_url)
values ($1)
returning sandbox_id, worker_id, started_at, created_at, updated_at, git_url, sandbox_url, current_state
`

func (q *Queries) InsertSandbox(ctx context.Context, gitUrl pgtype.Text) (Sandbox, error) {
	row := q.db.QueryRow(ctx, insertSandbox, gitUrl)
	var i Sandbox
	err := row.Scan(
		&i.SandboxID,
		&i.WorkerID,
		&i.StartedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GitUrl,
		&i.SandboxUrl,
		&i.CurrentState,
	)
	return i, err
}

const updateSandbox = `-- name: UpdateSandbox :exec
update sandboxes set
started_at = $2,
sandbox_url = $3
where sandbox_id = $1
`

type UpdateSandboxParams struct {
	SandboxID  int64              `db:"sandbox_id" json:"sandbox_id"`
	StartedAt  pgtype.Timestamptz `db:"started_at" json:"started_at"`
	SandboxUrl pgtype.Text        `db:"sandbox_url" json:"sandbox_url"`
}

func (q *Queries) UpdateSandbox(ctx context.Context, arg UpdateSandboxParams) error {
	_, err := q.db.Exec(ctx, updateSandbox, arg.SandboxID, arg.StartedAt, arg.SandboxUrl)
	return err
}

const updateSandboxStartTime = `-- name: UpdateSandboxStartTime :exec
update sandboxes set
started_at = $2
where sandbox_id = $1
`

type UpdateSandboxStartTimeParams struct {
	SandboxID int64              `db:"sandbox_id" json:"sandbox_id"`
	StartedAt pgtype.Timestamptz `db:"started_at" json:"started_at"`
}

func (q *Queries) UpdateSandboxStartTime(ctx context.Context, arg UpdateSandboxStartTimeParams) error {
	_, err := q.db.Exec(ctx, updateSandboxStartTime, arg.SandboxID, arg.StartedAt)
	return err
}

const updateSandboxState = `-- name: UpdateSandboxState :exec
update  sandboxes set
current_state = $2
where sandbox_id =  $1
`

type UpdateSandboxStateParams struct {
	SandboxID    int64  `db:"sandbox_id" json:"sandbox_id"`
	CurrentState string `db:"current_state" json:"current_state"`
}

func (q *Queries) UpdateSandboxState(ctx context.Context, arg UpdateSandboxStateParams) error {
	_, err := q.db.Exec(ctx, updateSandboxState, arg.SandboxID, arg.CurrentState)
	return err
}
